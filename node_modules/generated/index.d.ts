
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model aggregated_bandwidth_logs_30min
 * 
 */
export type aggregated_bandwidth_logs_30min = $Result.DefaultSelection<Prisma.$aggregated_bandwidth_logs_30minPayload>
/**
 * Model aggregated_bandwidth_logs_3hr
 * 
 */
export type aggregated_bandwidth_logs_3hr = $Result.DefaultSelection<Prisma.$aggregated_bandwidth_logs_3hrPayload>
/**
 * Model devices
 * 
 */
export type devices = $Result.DefaultSelection<Prisma.$devicesPayload>
/**
 * Model raw_bandwidth_logs
 * 
 */
export type raw_bandwidth_logs = $Result.DefaultSelection<Prisma.$raw_bandwidth_logsPayload>
/**
 * Model traffic
 * 
 */
export type traffic = $Result.DefaultSelection<Prisma.$trafficPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Aggregated_bandwidth_logs_30mins
 * const aggregated_bandwidth_logs_30mins = await prisma.aggregated_bandwidth_logs_30min.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Aggregated_bandwidth_logs_30mins
   * const aggregated_bandwidth_logs_30mins = await prisma.aggregated_bandwidth_logs_30min.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.aggregated_bandwidth_logs_30min`: Exposes CRUD operations for the **aggregated_bandwidth_logs_30min** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Aggregated_bandwidth_logs_30mins
    * const aggregated_bandwidth_logs_30mins = await prisma.aggregated_bandwidth_logs_30min.findMany()
    * ```
    */
  get aggregated_bandwidth_logs_30min(): Prisma.aggregated_bandwidth_logs_30minDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aggregated_bandwidth_logs_3hr`: Exposes CRUD operations for the **aggregated_bandwidth_logs_3hr** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Aggregated_bandwidth_logs_3hrs
    * const aggregated_bandwidth_logs_3hrs = await prisma.aggregated_bandwidth_logs_3hr.findMany()
    * ```
    */
  get aggregated_bandwidth_logs_3hr(): Prisma.aggregated_bandwidth_logs_3hrDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.devices`: Exposes CRUD operations for the **devices** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Devices
    * const devices = await prisma.devices.findMany()
    * ```
    */
  get devices(): Prisma.devicesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.raw_bandwidth_logs`: Exposes CRUD operations for the **raw_bandwidth_logs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Raw_bandwidth_logs
    * const raw_bandwidth_logs = await prisma.raw_bandwidth_logs.findMany()
    * ```
    */
  get raw_bandwidth_logs(): Prisma.raw_bandwidth_logsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.traffic`: Exposes CRUD operations for the **traffic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Traffic
    * const traffic = await prisma.traffic.findMany()
    * ```
    */
  get traffic(): Prisma.trafficDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    aggregated_bandwidth_logs_30min: 'aggregated_bandwidth_logs_30min',
    aggregated_bandwidth_logs_3hr: 'aggregated_bandwidth_logs_3hr',
    devices: 'devices',
    raw_bandwidth_logs: 'raw_bandwidth_logs',
    traffic: 'traffic',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "aggregated_bandwidth_logs_30min" | "aggregated_bandwidth_logs_3hr" | "devices" | "raw_bandwidth_logs" | "traffic" | "users"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      aggregated_bandwidth_logs_30min: {
        payload: Prisma.$aggregated_bandwidth_logs_30minPayload<ExtArgs>
        fields: Prisma.aggregated_bandwidth_logs_30minFieldRefs
        operations: {
          findUnique: {
            args: Prisma.aggregated_bandwidth_logs_30minFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aggregated_bandwidth_logs_30minPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.aggregated_bandwidth_logs_30minFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aggregated_bandwidth_logs_30minPayload>
          }
          findFirst: {
            args: Prisma.aggregated_bandwidth_logs_30minFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aggregated_bandwidth_logs_30minPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.aggregated_bandwidth_logs_30minFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aggregated_bandwidth_logs_30minPayload>
          }
          findMany: {
            args: Prisma.aggregated_bandwidth_logs_30minFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aggregated_bandwidth_logs_30minPayload>[]
          }
          create: {
            args: Prisma.aggregated_bandwidth_logs_30minCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aggregated_bandwidth_logs_30minPayload>
          }
          createMany: {
            args: Prisma.aggregated_bandwidth_logs_30minCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.aggregated_bandwidth_logs_30minDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aggregated_bandwidth_logs_30minPayload>
          }
          update: {
            args: Prisma.aggregated_bandwidth_logs_30minUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aggregated_bandwidth_logs_30minPayload>
          }
          deleteMany: {
            args: Prisma.aggregated_bandwidth_logs_30minDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.aggregated_bandwidth_logs_30minUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.aggregated_bandwidth_logs_30minUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aggregated_bandwidth_logs_30minPayload>
          }
          aggregate: {
            args: Prisma.Aggregated_bandwidth_logs_30minAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAggregated_bandwidth_logs_30min>
          }
          groupBy: {
            args: Prisma.aggregated_bandwidth_logs_30minGroupByArgs<ExtArgs>
            result: $Utils.Optional<Aggregated_bandwidth_logs_30minGroupByOutputType>[]
          }
          count: {
            args: Prisma.aggregated_bandwidth_logs_30minCountArgs<ExtArgs>
            result: $Utils.Optional<Aggregated_bandwidth_logs_30minCountAggregateOutputType> | number
          }
        }
      }
      aggregated_bandwidth_logs_3hr: {
        payload: Prisma.$aggregated_bandwidth_logs_3hrPayload<ExtArgs>
        fields: Prisma.aggregated_bandwidth_logs_3hrFieldRefs
        operations: {
          findUnique: {
            args: Prisma.aggregated_bandwidth_logs_3hrFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aggregated_bandwidth_logs_3hrPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.aggregated_bandwidth_logs_3hrFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aggregated_bandwidth_logs_3hrPayload>
          }
          findFirst: {
            args: Prisma.aggregated_bandwidth_logs_3hrFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aggregated_bandwidth_logs_3hrPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.aggregated_bandwidth_logs_3hrFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aggregated_bandwidth_logs_3hrPayload>
          }
          findMany: {
            args: Prisma.aggregated_bandwidth_logs_3hrFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aggregated_bandwidth_logs_3hrPayload>[]
          }
          create: {
            args: Prisma.aggregated_bandwidth_logs_3hrCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aggregated_bandwidth_logs_3hrPayload>
          }
          createMany: {
            args: Prisma.aggregated_bandwidth_logs_3hrCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.aggregated_bandwidth_logs_3hrDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aggregated_bandwidth_logs_3hrPayload>
          }
          update: {
            args: Prisma.aggregated_bandwidth_logs_3hrUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aggregated_bandwidth_logs_3hrPayload>
          }
          deleteMany: {
            args: Prisma.aggregated_bandwidth_logs_3hrDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.aggregated_bandwidth_logs_3hrUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.aggregated_bandwidth_logs_3hrUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aggregated_bandwidth_logs_3hrPayload>
          }
          aggregate: {
            args: Prisma.Aggregated_bandwidth_logs_3hrAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAggregated_bandwidth_logs_3hr>
          }
          groupBy: {
            args: Prisma.aggregated_bandwidth_logs_3hrGroupByArgs<ExtArgs>
            result: $Utils.Optional<Aggregated_bandwidth_logs_3hrGroupByOutputType>[]
          }
          count: {
            args: Prisma.aggregated_bandwidth_logs_3hrCountArgs<ExtArgs>
            result: $Utils.Optional<Aggregated_bandwidth_logs_3hrCountAggregateOutputType> | number
          }
        }
      }
      devices: {
        payload: Prisma.$devicesPayload<ExtArgs>
        fields: Prisma.devicesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.devicesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$devicesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.devicesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$devicesPayload>
          }
          findFirst: {
            args: Prisma.devicesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$devicesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.devicesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$devicesPayload>
          }
          findMany: {
            args: Prisma.devicesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$devicesPayload>[]
          }
          create: {
            args: Prisma.devicesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$devicesPayload>
          }
          createMany: {
            args: Prisma.devicesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.devicesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$devicesPayload>
          }
          update: {
            args: Prisma.devicesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$devicesPayload>
          }
          deleteMany: {
            args: Prisma.devicesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.devicesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.devicesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$devicesPayload>
          }
          aggregate: {
            args: Prisma.DevicesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDevices>
          }
          groupBy: {
            args: Prisma.devicesGroupByArgs<ExtArgs>
            result: $Utils.Optional<DevicesGroupByOutputType>[]
          }
          count: {
            args: Prisma.devicesCountArgs<ExtArgs>
            result: $Utils.Optional<DevicesCountAggregateOutputType> | number
          }
        }
      }
      raw_bandwidth_logs: {
        payload: Prisma.$raw_bandwidth_logsPayload<ExtArgs>
        fields: Prisma.raw_bandwidth_logsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.raw_bandwidth_logsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_bandwidth_logsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.raw_bandwidth_logsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_bandwidth_logsPayload>
          }
          findFirst: {
            args: Prisma.raw_bandwidth_logsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_bandwidth_logsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.raw_bandwidth_logsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_bandwidth_logsPayload>
          }
          findMany: {
            args: Prisma.raw_bandwidth_logsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_bandwidth_logsPayload>[]
          }
          create: {
            args: Prisma.raw_bandwidth_logsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_bandwidth_logsPayload>
          }
          createMany: {
            args: Prisma.raw_bandwidth_logsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.raw_bandwidth_logsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_bandwidth_logsPayload>
          }
          update: {
            args: Prisma.raw_bandwidth_logsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_bandwidth_logsPayload>
          }
          deleteMany: {
            args: Prisma.raw_bandwidth_logsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.raw_bandwidth_logsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.raw_bandwidth_logsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_bandwidth_logsPayload>
          }
          aggregate: {
            args: Prisma.Raw_bandwidth_logsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRaw_bandwidth_logs>
          }
          groupBy: {
            args: Prisma.raw_bandwidth_logsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Raw_bandwidth_logsGroupByOutputType>[]
          }
          count: {
            args: Prisma.raw_bandwidth_logsCountArgs<ExtArgs>
            result: $Utils.Optional<Raw_bandwidth_logsCountAggregateOutputType> | number
          }
        }
      }
      traffic: {
        payload: Prisma.$trafficPayload<ExtArgs>
        fields: Prisma.trafficFieldRefs
        operations: {
          findUnique: {
            args: Prisma.trafficFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trafficPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.trafficFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trafficPayload>
          }
          findFirst: {
            args: Prisma.trafficFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trafficPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.trafficFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trafficPayload>
          }
          findMany: {
            args: Prisma.trafficFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trafficPayload>[]
          }
          create: {
            args: Prisma.trafficCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trafficPayload>
          }
          createMany: {
            args: Prisma.trafficCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.trafficDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trafficPayload>
          }
          update: {
            args: Prisma.trafficUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trafficPayload>
          }
          deleteMany: {
            args: Prisma.trafficDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.trafficUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.trafficUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trafficPayload>
          }
          aggregate: {
            args: Prisma.TrafficAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTraffic>
          }
          groupBy: {
            args: Prisma.trafficGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrafficGroupByOutputType>[]
          }
          count: {
            args: Prisma.trafficCountArgs<ExtArgs>
            result: $Utils.Optional<TrafficCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    aggregated_bandwidth_logs_30min?: aggregated_bandwidth_logs_30minOmit
    aggregated_bandwidth_logs_3hr?: aggregated_bandwidth_logs_3hrOmit
    devices?: devicesOmit
    raw_bandwidth_logs?: raw_bandwidth_logsOmit
    traffic?: trafficOmit
    users?: usersOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DevicesCountOutputType
   */

  export type DevicesCountOutputType = {
    traffic: number
  }

  export type DevicesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    traffic?: boolean | DevicesCountOutputTypeCountTrafficArgs
  }

  // Custom InputTypes
  /**
   * DevicesCountOutputType without action
   */
  export type DevicesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DevicesCountOutputType
     */
    select?: DevicesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DevicesCountOutputType without action
   */
  export type DevicesCountOutputTypeCountTrafficArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trafficWhereInput
  }


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    aggregated_bandwidth_logs_30min: number
    aggregated_bandwidth_logs_3hr: number
    raw_bandwidth_logs: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    aggregated_bandwidth_logs_30min?: boolean | UsersCountOutputTypeCountAggregated_bandwidth_logs_30minArgs
    aggregated_bandwidth_logs_3hr?: boolean | UsersCountOutputTypeCountAggregated_bandwidth_logs_3hrArgs
    raw_bandwidth_logs?: boolean | UsersCountOutputTypeCountRaw_bandwidth_logsArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountAggregated_bandwidth_logs_30minArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: aggregated_bandwidth_logs_30minWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountAggregated_bandwidth_logs_3hrArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: aggregated_bandwidth_logs_3hrWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountRaw_bandwidth_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: raw_bandwidth_logsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model aggregated_bandwidth_logs_30min
   */

  export type AggregateAggregated_bandwidth_logs_30min = {
    _count: Aggregated_bandwidth_logs_30minCountAggregateOutputType | null
    _avg: Aggregated_bandwidth_logs_30minAvgAggregateOutputType | null
    _sum: Aggregated_bandwidth_logs_30minSumAggregateOutputType | null
    _min: Aggregated_bandwidth_logs_30minMinAggregateOutputType | null
    _max: Aggregated_bandwidth_logs_30minMaxAggregateOutputType | null
  }

  export type Aggregated_bandwidth_logs_30minAvgAggregateOutputType = {
    agg_id: number | null
    user_id: number | null
    total_tx_bytes: number | null
    total_rx_bytes: number | null
  }

  export type Aggregated_bandwidth_logs_30minSumAggregateOutputType = {
    agg_id: bigint | null
    user_id: number | null
    total_tx_bytes: bigint | null
    total_rx_bytes: bigint | null
  }

  export type Aggregated_bandwidth_logs_30minMinAggregateOutputType = {
    agg_id: bigint | null
    user_id: number | null
    interval_start: Date | null
    interval_end: Date | null
    total_tx_bytes: bigint | null
    total_rx_bytes: bigint | null
  }

  export type Aggregated_bandwidth_logs_30minMaxAggregateOutputType = {
    agg_id: bigint | null
    user_id: number | null
    interval_start: Date | null
    interval_end: Date | null
    total_tx_bytes: bigint | null
    total_rx_bytes: bigint | null
  }

  export type Aggregated_bandwidth_logs_30minCountAggregateOutputType = {
    agg_id: number
    user_id: number
    interval_start: number
    interval_end: number
    total_tx_bytes: number
    total_rx_bytes: number
    _all: number
  }


  export type Aggregated_bandwidth_logs_30minAvgAggregateInputType = {
    agg_id?: true
    user_id?: true
    total_tx_bytes?: true
    total_rx_bytes?: true
  }

  export type Aggregated_bandwidth_logs_30minSumAggregateInputType = {
    agg_id?: true
    user_id?: true
    total_tx_bytes?: true
    total_rx_bytes?: true
  }

  export type Aggregated_bandwidth_logs_30minMinAggregateInputType = {
    agg_id?: true
    user_id?: true
    interval_start?: true
    interval_end?: true
    total_tx_bytes?: true
    total_rx_bytes?: true
  }

  export type Aggregated_bandwidth_logs_30minMaxAggregateInputType = {
    agg_id?: true
    user_id?: true
    interval_start?: true
    interval_end?: true
    total_tx_bytes?: true
    total_rx_bytes?: true
  }

  export type Aggregated_bandwidth_logs_30minCountAggregateInputType = {
    agg_id?: true
    user_id?: true
    interval_start?: true
    interval_end?: true
    total_tx_bytes?: true
    total_rx_bytes?: true
    _all?: true
  }

  export type Aggregated_bandwidth_logs_30minAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which aggregated_bandwidth_logs_30min to aggregate.
     */
    where?: aggregated_bandwidth_logs_30minWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aggregated_bandwidth_logs_30mins to fetch.
     */
    orderBy?: aggregated_bandwidth_logs_30minOrderByWithRelationInput | aggregated_bandwidth_logs_30minOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: aggregated_bandwidth_logs_30minWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aggregated_bandwidth_logs_30mins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aggregated_bandwidth_logs_30mins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned aggregated_bandwidth_logs_30mins
    **/
    _count?: true | Aggregated_bandwidth_logs_30minCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Aggregated_bandwidth_logs_30minAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Aggregated_bandwidth_logs_30minSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Aggregated_bandwidth_logs_30minMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Aggregated_bandwidth_logs_30minMaxAggregateInputType
  }

  export type GetAggregated_bandwidth_logs_30minAggregateType<T extends Aggregated_bandwidth_logs_30minAggregateArgs> = {
        [P in keyof T & keyof AggregateAggregated_bandwidth_logs_30min]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAggregated_bandwidth_logs_30min[P]>
      : GetScalarType<T[P], AggregateAggregated_bandwidth_logs_30min[P]>
  }




  export type aggregated_bandwidth_logs_30minGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: aggregated_bandwidth_logs_30minWhereInput
    orderBy?: aggregated_bandwidth_logs_30minOrderByWithAggregationInput | aggregated_bandwidth_logs_30minOrderByWithAggregationInput[]
    by: Aggregated_bandwidth_logs_30minScalarFieldEnum[] | Aggregated_bandwidth_logs_30minScalarFieldEnum
    having?: aggregated_bandwidth_logs_30minScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Aggregated_bandwidth_logs_30minCountAggregateInputType | true
    _avg?: Aggregated_bandwidth_logs_30minAvgAggregateInputType
    _sum?: Aggregated_bandwidth_logs_30minSumAggregateInputType
    _min?: Aggregated_bandwidth_logs_30minMinAggregateInputType
    _max?: Aggregated_bandwidth_logs_30minMaxAggregateInputType
  }

  export type Aggregated_bandwidth_logs_30minGroupByOutputType = {
    agg_id: bigint
    user_id: number
    interval_start: Date
    interval_end: Date
    total_tx_bytes: bigint
    total_rx_bytes: bigint
    _count: Aggregated_bandwidth_logs_30minCountAggregateOutputType | null
    _avg: Aggregated_bandwidth_logs_30minAvgAggregateOutputType | null
    _sum: Aggregated_bandwidth_logs_30minSumAggregateOutputType | null
    _min: Aggregated_bandwidth_logs_30minMinAggregateOutputType | null
    _max: Aggregated_bandwidth_logs_30minMaxAggregateOutputType | null
  }

  type GetAggregated_bandwidth_logs_30minGroupByPayload<T extends aggregated_bandwidth_logs_30minGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Aggregated_bandwidth_logs_30minGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Aggregated_bandwidth_logs_30minGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Aggregated_bandwidth_logs_30minGroupByOutputType[P]>
            : GetScalarType<T[P], Aggregated_bandwidth_logs_30minGroupByOutputType[P]>
        }
      >
    >


  export type aggregated_bandwidth_logs_30minSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    agg_id?: boolean
    user_id?: boolean
    interval_start?: boolean
    interval_end?: boolean
    total_tx_bytes?: boolean
    total_rx_bytes?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aggregated_bandwidth_logs_30min"]>



  export type aggregated_bandwidth_logs_30minSelectScalar = {
    agg_id?: boolean
    user_id?: boolean
    interval_start?: boolean
    interval_end?: boolean
    total_tx_bytes?: boolean
    total_rx_bytes?: boolean
  }

  export type aggregated_bandwidth_logs_30minOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"agg_id" | "user_id" | "interval_start" | "interval_end" | "total_tx_bytes" | "total_rx_bytes", ExtArgs["result"]["aggregated_bandwidth_logs_30min"]>
  export type aggregated_bandwidth_logs_30minInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $aggregated_bandwidth_logs_30minPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "aggregated_bandwidth_logs_30min"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      agg_id: bigint
      user_id: number
      interval_start: Date
      interval_end: Date
      total_tx_bytes: bigint
      total_rx_bytes: bigint
    }, ExtArgs["result"]["aggregated_bandwidth_logs_30min"]>
    composites: {}
  }

  type aggregated_bandwidth_logs_30minGetPayload<S extends boolean | null | undefined | aggregated_bandwidth_logs_30minDefaultArgs> = $Result.GetResult<Prisma.$aggregated_bandwidth_logs_30minPayload, S>

  type aggregated_bandwidth_logs_30minCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<aggregated_bandwidth_logs_30minFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Aggregated_bandwidth_logs_30minCountAggregateInputType | true
    }

  export interface aggregated_bandwidth_logs_30minDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['aggregated_bandwidth_logs_30min'], meta: { name: 'aggregated_bandwidth_logs_30min' } }
    /**
     * Find zero or one Aggregated_bandwidth_logs_30min that matches the filter.
     * @param {aggregated_bandwidth_logs_30minFindUniqueArgs} args - Arguments to find a Aggregated_bandwidth_logs_30min
     * @example
     * // Get one Aggregated_bandwidth_logs_30min
     * const aggregated_bandwidth_logs_30min = await prisma.aggregated_bandwidth_logs_30min.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends aggregated_bandwidth_logs_30minFindUniqueArgs>(args: SelectSubset<T, aggregated_bandwidth_logs_30minFindUniqueArgs<ExtArgs>>): Prisma__aggregated_bandwidth_logs_30minClient<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_30minPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Aggregated_bandwidth_logs_30min that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {aggregated_bandwidth_logs_30minFindUniqueOrThrowArgs} args - Arguments to find a Aggregated_bandwidth_logs_30min
     * @example
     * // Get one Aggregated_bandwidth_logs_30min
     * const aggregated_bandwidth_logs_30min = await prisma.aggregated_bandwidth_logs_30min.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends aggregated_bandwidth_logs_30minFindUniqueOrThrowArgs>(args: SelectSubset<T, aggregated_bandwidth_logs_30minFindUniqueOrThrowArgs<ExtArgs>>): Prisma__aggregated_bandwidth_logs_30minClient<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_30minPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Aggregated_bandwidth_logs_30min that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aggregated_bandwidth_logs_30minFindFirstArgs} args - Arguments to find a Aggregated_bandwidth_logs_30min
     * @example
     * // Get one Aggregated_bandwidth_logs_30min
     * const aggregated_bandwidth_logs_30min = await prisma.aggregated_bandwidth_logs_30min.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends aggregated_bandwidth_logs_30minFindFirstArgs>(args?: SelectSubset<T, aggregated_bandwidth_logs_30minFindFirstArgs<ExtArgs>>): Prisma__aggregated_bandwidth_logs_30minClient<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_30minPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Aggregated_bandwidth_logs_30min that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aggregated_bandwidth_logs_30minFindFirstOrThrowArgs} args - Arguments to find a Aggregated_bandwidth_logs_30min
     * @example
     * // Get one Aggregated_bandwidth_logs_30min
     * const aggregated_bandwidth_logs_30min = await prisma.aggregated_bandwidth_logs_30min.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends aggregated_bandwidth_logs_30minFindFirstOrThrowArgs>(args?: SelectSubset<T, aggregated_bandwidth_logs_30minFindFirstOrThrowArgs<ExtArgs>>): Prisma__aggregated_bandwidth_logs_30minClient<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_30minPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Aggregated_bandwidth_logs_30mins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aggregated_bandwidth_logs_30minFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Aggregated_bandwidth_logs_30mins
     * const aggregated_bandwidth_logs_30mins = await prisma.aggregated_bandwidth_logs_30min.findMany()
     * 
     * // Get first 10 Aggregated_bandwidth_logs_30mins
     * const aggregated_bandwidth_logs_30mins = await prisma.aggregated_bandwidth_logs_30min.findMany({ take: 10 })
     * 
     * // Only select the `agg_id`
     * const aggregated_bandwidth_logs_30minWithAgg_idOnly = await prisma.aggregated_bandwidth_logs_30min.findMany({ select: { agg_id: true } })
     * 
     */
    findMany<T extends aggregated_bandwidth_logs_30minFindManyArgs>(args?: SelectSubset<T, aggregated_bandwidth_logs_30minFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_30minPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Aggregated_bandwidth_logs_30min.
     * @param {aggregated_bandwidth_logs_30minCreateArgs} args - Arguments to create a Aggregated_bandwidth_logs_30min.
     * @example
     * // Create one Aggregated_bandwidth_logs_30min
     * const Aggregated_bandwidth_logs_30min = await prisma.aggregated_bandwidth_logs_30min.create({
     *   data: {
     *     // ... data to create a Aggregated_bandwidth_logs_30min
     *   }
     * })
     * 
     */
    create<T extends aggregated_bandwidth_logs_30minCreateArgs>(args: SelectSubset<T, aggregated_bandwidth_logs_30minCreateArgs<ExtArgs>>): Prisma__aggregated_bandwidth_logs_30minClient<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_30minPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Aggregated_bandwidth_logs_30mins.
     * @param {aggregated_bandwidth_logs_30minCreateManyArgs} args - Arguments to create many Aggregated_bandwidth_logs_30mins.
     * @example
     * // Create many Aggregated_bandwidth_logs_30mins
     * const aggregated_bandwidth_logs_30min = await prisma.aggregated_bandwidth_logs_30min.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends aggregated_bandwidth_logs_30minCreateManyArgs>(args?: SelectSubset<T, aggregated_bandwidth_logs_30minCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Aggregated_bandwidth_logs_30min.
     * @param {aggregated_bandwidth_logs_30minDeleteArgs} args - Arguments to delete one Aggregated_bandwidth_logs_30min.
     * @example
     * // Delete one Aggregated_bandwidth_logs_30min
     * const Aggregated_bandwidth_logs_30min = await prisma.aggregated_bandwidth_logs_30min.delete({
     *   where: {
     *     // ... filter to delete one Aggregated_bandwidth_logs_30min
     *   }
     * })
     * 
     */
    delete<T extends aggregated_bandwidth_logs_30minDeleteArgs>(args: SelectSubset<T, aggregated_bandwidth_logs_30minDeleteArgs<ExtArgs>>): Prisma__aggregated_bandwidth_logs_30minClient<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_30minPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Aggregated_bandwidth_logs_30min.
     * @param {aggregated_bandwidth_logs_30minUpdateArgs} args - Arguments to update one Aggregated_bandwidth_logs_30min.
     * @example
     * // Update one Aggregated_bandwidth_logs_30min
     * const aggregated_bandwidth_logs_30min = await prisma.aggregated_bandwidth_logs_30min.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends aggregated_bandwidth_logs_30minUpdateArgs>(args: SelectSubset<T, aggregated_bandwidth_logs_30minUpdateArgs<ExtArgs>>): Prisma__aggregated_bandwidth_logs_30minClient<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_30minPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Aggregated_bandwidth_logs_30mins.
     * @param {aggregated_bandwidth_logs_30minDeleteManyArgs} args - Arguments to filter Aggregated_bandwidth_logs_30mins to delete.
     * @example
     * // Delete a few Aggregated_bandwidth_logs_30mins
     * const { count } = await prisma.aggregated_bandwidth_logs_30min.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends aggregated_bandwidth_logs_30minDeleteManyArgs>(args?: SelectSubset<T, aggregated_bandwidth_logs_30minDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Aggregated_bandwidth_logs_30mins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aggregated_bandwidth_logs_30minUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Aggregated_bandwidth_logs_30mins
     * const aggregated_bandwidth_logs_30min = await prisma.aggregated_bandwidth_logs_30min.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends aggregated_bandwidth_logs_30minUpdateManyArgs>(args: SelectSubset<T, aggregated_bandwidth_logs_30minUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Aggregated_bandwidth_logs_30min.
     * @param {aggregated_bandwidth_logs_30minUpsertArgs} args - Arguments to update or create a Aggregated_bandwidth_logs_30min.
     * @example
     * // Update or create a Aggregated_bandwidth_logs_30min
     * const aggregated_bandwidth_logs_30min = await prisma.aggregated_bandwidth_logs_30min.upsert({
     *   create: {
     *     // ... data to create a Aggregated_bandwidth_logs_30min
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Aggregated_bandwidth_logs_30min we want to update
     *   }
     * })
     */
    upsert<T extends aggregated_bandwidth_logs_30minUpsertArgs>(args: SelectSubset<T, aggregated_bandwidth_logs_30minUpsertArgs<ExtArgs>>): Prisma__aggregated_bandwidth_logs_30minClient<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_30minPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Aggregated_bandwidth_logs_30mins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aggregated_bandwidth_logs_30minCountArgs} args - Arguments to filter Aggregated_bandwidth_logs_30mins to count.
     * @example
     * // Count the number of Aggregated_bandwidth_logs_30mins
     * const count = await prisma.aggregated_bandwidth_logs_30min.count({
     *   where: {
     *     // ... the filter for the Aggregated_bandwidth_logs_30mins we want to count
     *   }
     * })
    **/
    count<T extends aggregated_bandwidth_logs_30minCountArgs>(
      args?: Subset<T, aggregated_bandwidth_logs_30minCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Aggregated_bandwidth_logs_30minCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Aggregated_bandwidth_logs_30min.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Aggregated_bandwidth_logs_30minAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Aggregated_bandwidth_logs_30minAggregateArgs>(args: Subset<T, Aggregated_bandwidth_logs_30minAggregateArgs>): Prisma.PrismaPromise<GetAggregated_bandwidth_logs_30minAggregateType<T>>

    /**
     * Group by Aggregated_bandwidth_logs_30min.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aggregated_bandwidth_logs_30minGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends aggregated_bandwidth_logs_30minGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: aggregated_bandwidth_logs_30minGroupByArgs['orderBy'] }
        : { orderBy?: aggregated_bandwidth_logs_30minGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, aggregated_bandwidth_logs_30minGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAggregated_bandwidth_logs_30minGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the aggregated_bandwidth_logs_30min model
   */
  readonly fields: aggregated_bandwidth_logs_30minFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for aggregated_bandwidth_logs_30min.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__aggregated_bandwidth_logs_30minClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the aggregated_bandwidth_logs_30min model
   */
  interface aggregated_bandwidth_logs_30minFieldRefs {
    readonly agg_id: FieldRef<"aggregated_bandwidth_logs_30min", 'BigInt'>
    readonly user_id: FieldRef<"aggregated_bandwidth_logs_30min", 'Int'>
    readonly interval_start: FieldRef<"aggregated_bandwidth_logs_30min", 'DateTime'>
    readonly interval_end: FieldRef<"aggregated_bandwidth_logs_30min", 'DateTime'>
    readonly total_tx_bytes: FieldRef<"aggregated_bandwidth_logs_30min", 'BigInt'>
    readonly total_rx_bytes: FieldRef<"aggregated_bandwidth_logs_30min", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * aggregated_bandwidth_logs_30min findUnique
   */
  export type aggregated_bandwidth_logs_30minFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_30min
     */
    select?: aggregated_bandwidth_logs_30minSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_30min
     */
    omit?: aggregated_bandwidth_logs_30minOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_30minInclude<ExtArgs> | null
    /**
     * Filter, which aggregated_bandwidth_logs_30min to fetch.
     */
    where: aggregated_bandwidth_logs_30minWhereUniqueInput
  }

  /**
   * aggregated_bandwidth_logs_30min findUniqueOrThrow
   */
  export type aggregated_bandwidth_logs_30minFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_30min
     */
    select?: aggregated_bandwidth_logs_30minSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_30min
     */
    omit?: aggregated_bandwidth_logs_30minOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_30minInclude<ExtArgs> | null
    /**
     * Filter, which aggregated_bandwidth_logs_30min to fetch.
     */
    where: aggregated_bandwidth_logs_30minWhereUniqueInput
  }

  /**
   * aggregated_bandwidth_logs_30min findFirst
   */
  export type aggregated_bandwidth_logs_30minFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_30min
     */
    select?: aggregated_bandwidth_logs_30minSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_30min
     */
    omit?: aggregated_bandwidth_logs_30minOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_30minInclude<ExtArgs> | null
    /**
     * Filter, which aggregated_bandwidth_logs_30min to fetch.
     */
    where?: aggregated_bandwidth_logs_30minWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aggregated_bandwidth_logs_30mins to fetch.
     */
    orderBy?: aggregated_bandwidth_logs_30minOrderByWithRelationInput | aggregated_bandwidth_logs_30minOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for aggregated_bandwidth_logs_30mins.
     */
    cursor?: aggregated_bandwidth_logs_30minWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aggregated_bandwidth_logs_30mins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aggregated_bandwidth_logs_30mins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of aggregated_bandwidth_logs_30mins.
     */
    distinct?: Aggregated_bandwidth_logs_30minScalarFieldEnum | Aggregated_bandwidth_logs_30minScalarFieldEnum[]
  }

  /**
   * aggregated_bandwidth_logs_30min findFirstOrThrow
   */
  export type aggregated_bandwidth_logs_30minFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_30min
     */
    select?: aggregated_bandwidth_logs_30minSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_30min
     */
    omit?: aggregated_bandwidth_logs_30minOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_30minInclude<ExtArgs> | null
    /**
     * Filter, which aggregated_bandwidth_logs_30min to fetch.
     */
    where?: aggregated_bandwidth_logs_30minWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aggregated_bandwidth_logs_30mins to fetch.
     */
    orderBy?: aggregated_bandwidth_logs_30minOrderByWithRelationInput | aggregated_bandwidth_logs_30minOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for aggregated_bandwidth_logs_30mins.
     */
    cursor?: aggregated_bandwidth_logs_30minWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aggregated_bandwidth_logs_30mins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aggregated_bandwidth_logs_30mins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of aggregated_bandwidth_logs_30mins.
     */
    distinct?: Aggregated_bandwidth_logs_30minScalarFieldEnum | Aggregated_bandwidth_logs_30minScalarFieldEnum[]
  }

  /**
   * aggregated_bandwidth_logs_30min findMany
   */
  export type aggregated_bandwidth_logs_30minFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_30min
     */
    select?: aggregated_bandwidth_logs_30minSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_30min
     */
    omit?: aggregated_bandwidth_logs_30minOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_30minInclude<ExtArgs> | null
    /**
     * Filter, which aggregated_bandwidth_logs_30mins to fetch.
     */
    where?: aggregated_bandwidth_logs_30minWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aggregated_bandwidth_logs_30mins to fetch.
     */
    orderBy?: aggregated_bandwidth_logs_30minOrderByWithRelationInput | aggregated_bandwidth_logs_30minOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing aggregated_bandwidth_logs_30mins.
     */
    cursor?: aggregated_bandwidth_logs_30minWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aggregated_bandwidth_logs_30mins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aggregated_bandwidth_logs_30mins.
     */
    skip?: number
    distinct?: Aggregated_bandwidth_logs_30minScalarFieldEnum | Aggregated_bandwidth_logs_30minScalarFieldEnum[]
  }

  /**
   * aggregated_bandwidth_logs_30min create
   */
  export type aggregated_bandwidth_logs_30minCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_30min
     */
    select?: aggregated_bandwidth_logs_30minSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_30min
     */
    omit?: aggregated_bandwidth_logs_30minOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_30minInclude<ExtArgs> | null
    /**
     * The data needed to create a aggregated_bandwidth_logs_30min.
     */
    data: XOR<aggregated_bandwidth_logs_30minCreateInput, aggregated_bandwidth_logs_30minUncheckedCreateInput>
  }

  /**
   * aggregated_bandwidth_logs_30min createMany
   */
  export type aggregated_bandwidth_logs_30minCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many aggregated_bandwidth_logs_30mins.
     */
    data: aggregated_bandwidth_logs_30minCreateManyInput | aggregated_bandwidth_logs_30minCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * aggregated_bandwidth_logs_30min update
   */
  export type aggregated_bandwidth_logs_30minUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_30min
     */
    select?: aggregated_bandwidth_logs_30minSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_30min
     */
    omit?: aggregated_bandwidth_logs_30minOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_30minInclude<ExtArgs> | null
    /**
     * The data needed to update a aggregated_bandwidth_logs_30min.
     */
    data: XOR<aggregated_bandwidth_logs_30minUpdateInput, aggregated_bandwidth_logs_30minUncheckedUpdateInput>
    /**
     * Choose, which aggregated_bandwidth_logs_30min to update.
     */
    where: aggregated_bandwidth_logs_30minWhereUniqueInput
  }

  /**
   * aggregated_bandwidth_logs_30min updateMany
   */
  export type aggregated_bandwidth_logs_30minUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update aggregated_bandwidth_logs_30mins.
     */
    data: XOR<aggregated_bandwidth_logs_30minUpdateManyMutationInput, aggregated_bandwidth_logs_30minUncheckedUpdateManyInput>
    /**
     * Filter which aggregated_bandwidth_logs_30mins to update
     */
    where?: aggregated_bandwidth_logs_30minWhereInput
    /**
     * Limit how many aggregated_bandwidth_logs_30mins to update.
     */
    limit?: number
  }

  /**
   * aggregated_bandwidth_logs_30min upsert
   */
  export type aggregated_bandwidth_logs_30minUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_30min
     */
    select?: aggregated_bandwidth_logs_30minSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_30min
     */
    omit?: aggregated_bandwidth_logs_30minOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_30minInclude<ExtArgs> | null
    /**
     * The filter to search for the aggregated_bandwidth_logs_30min to update in case it exists.
     */
    where: aggregated_bandwidth_logs_30minWhereUniqueInput
    /**
     * In case the aggregated_bandwidth_logs_30min found by the `where` argument doesn't exist, create a new aggregated_bandwidth_logs_30min with this data.
     */
    create: XOR<aggregated_bandwidth_logs_30minCreateInput, aggregated_bandwidth_logs_30minUncheckedCreateInput>
    /**
     * In case the aggregated_bandwidth_logs_30min was found with the provided `where` argument, update it with this data.
     */
    update: XOR<aggregated_bandwidth_logs_30minUpdateInput, aggregated_bandwidth_logs_30minUncheckedUpdateInput>
  }

  /**
   * aggregated_bandwidth_logs_30min delete
   */
  export type aggregated_bandwidth_logs_30minDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_30min
     */
    select?: aggregated_bandwidth_logs_30minSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_30min
     */
    omit?: aggregated_bandwidth_logs_30minOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_30minInclude<ExtArgs> | null
    /**
     * Filter which aggregated_bandwidth_logs_30min to delete.
     */
    where: aggregated_bandwidth_logs_30minWhereUniqueInput
  }

  /**
   * aggregated_bandwidth_logs_30min deleteMany
   */
  export type aggregated_bandwidth_logs_30minDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which aggregated_bandwidth_logs_30mins to delete
     */
    where?: aggregated_bandwidth_logs_30minWhereInput
    /**
     * Limit how many aggregated_bandwidth_logs_30mins to delete.
     */
    limit?: number
  }

  /**
   * aggregated_bandwidth_logs_30min without action
   */
  export type aggregated_bandwidth_logs_30minDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_30min
     */
    select?: aggregated_bandwidth_logs_30minSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_30min
     */
    omit?: aggregated_bandwidth_logs_30minOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_30minInclude<ExtArgs> | null
  }


  /**
   * Model aggregated_bandwidth_logs_3hr
   */

  export type AggregateAggregated_bandwidth_logs_3hr = {
    _count: Aggregated_bandwidth_logs_3hrCountAggregateOutputType | null
    _avg: Aggregated_bandwidth_logs_3hrAvgAggregateOutputType | null
    _sum: Aggregated_bandwidth_logs_3hrSumAggregateOutputType | null
    _min: Aggregated_bandwidth_logs_3hrMinAggregateOutputType | null
    _max: Aggregated_bandwidth_logs_3hrMaxAggregateOutputType | null
  }

  export type Aggregated_bandwidth_logs_3hrAvgAggregateOutputType = {
    agg_id: number | null
    user_id: number | null
    total_tx_bytes: number | null
    total_rx_bytes: number | null
  }

  export type Aggregated_bandwidth_logs_3hrSumAggregateOutputType = {
    agg_id: bigint | null
    user_id: number | null
    total_tx_bytes: bigint | null
    total_rx_bytes: bigint | null
  }

  export type Aggregated_bandwidth_logs_3hrMinAggregateOutputType = {
    agg_id: bigint | null
    user_id: number | null
    interval_start: Date | null
    interval_end: Date | null
    total_tx_bytes: bigint | null
    total_rx_bytes: bigint | null
  }

  export type Aggregated_bandwidth_logs_3hrMaxAggregateOutputType = {
    agg_id: bigint | null
    user_id: number | null
    interval_start: Date | null
    interval_end: Date | null
    total_tx_bytes: bigint | null
    total_rx_bytes: bigint | null
  }

  export type Aggregated_bandwidth_logs_3hrCountAggregateOutputType = {
    agg_id: number
    user_id: number
    interval_start: number
    interval_end: number
    total_tx_bytes: number
    total_rx_bytes: number
    _all: number
  }


  export type Aggregated_bandwidth_logs_3hrAvgAggregateInputType = {
    agg_id?: true
    user_id?: true
    total_tx_bytes?: true
    total_rx_bytes?: true
  }

  export type Aggregated_bandwidth_logs_3hrSumAggregateInputType = {
    agg_id?: true
    user_id?: true
    total_tx_bytes?: true
    total_rx_bytes?: true
  }

  export type Aggregated_bandwidth_logs_3hrMinAggregateInputType = {
    agg_id?: true
    user_id?: true
    interval_start?: true
    interval_end?: true
    total_tx_bytes?: true
    total_rx_bytes?: true
  }

  export type Aggregated_bandwidth_logs_3hrMaxAggregateInputType = {
    agg_id?: true
    user_id?: true
    interval_start?: true
    interval_end?: true
    total_tx_bytes?: true
    total_rx_bytes?: true
  }

  export type Aggregated_bandwidth_logs_3hrCountAggregateInputType = {
    agg_id?: true
    user_id?: true
    interval_start?: true
    interval_end?: true
    total_tx_bytes?: true
    total_rx_bytes?: true
    _all?: true
  }

  export type Aggregated_bandwidth_logs_3hrAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which aggregated_bandwidth_logs_3hr to aggregate.
     */
    where?: aggregated_bandwidth_logs_3hrWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aggregated_bandwidth_logs_3hrs to fetch.
     */
    orderBy?: aggregated_bandwidth_logs_3hrOrderByWithRelationInput | aggregated_bandwidth_logs_3hrOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: aggregated_bandwidth_logs_3hrWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aggregated_bandwidth_logs_3hrs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aggregated_bandwidth_logs_3hrs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned aggregated_bandwidth_logs_3hrs
    **/
    _count?: true | Aggregated_bandwidth_logs_3hrCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Aggregated_bandwidth_logs_3hrAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Aggregated_bandwidth_logs_3hrSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Aggregated_bandwidth_logs_3hrMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Aggregated_bandwidth_logs_3hrMaxAggregateInputType
  }

  export type GetAggregated_bandwidth_logs_3hrAggregateType<T extends Aggregated_bandwidth_logs_3hrAggregateArgs> = {
        [P in keyof T & keyof AggregateAggregated_bandwidth_logs_3hr]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAggregated_bandwidth_logs_3hr[P]>
      : GetScalarType<T[P], AggregateAggregated_bandwidth_logs_3hr[P]>
  }




  export type aggregated_bandwidth_logs_3hrGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: aggregated_bandwidth_logs_3hrWhereInput
    orderBy?: aggregated_bandwidth_logs_3hrOrderByWithAggregationInput | aggregated_bandwidth_logs_3hrOrderByWithAggregationInput[]
    by: Aggregated_bandwidth_logs_3hrScalarFieldEnum[] | Aggregated_bandwidth_logs_3hrScalarFieldEnum
    having?: aggregated_bandwidth_logs_3hrScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Aggregated_bandwidth_logs_3hrCountAggregateInputType | true
    _avg?: Aggregated_bandwidth_logs_3hrAvgAggregateInputType
    _sum?: Aggregated_bandwidth_logs_3hrSumAggregateInputType
    _min?: Aggregated_bandwidth_logs_3hrMinAggregateInputType
    _max?: Aggregated_bandwidth_logs_3hrMaxAggregateInputType
  }

  export type Aggregated_bandwidth_logs_3hrGroupByOutputType = {
    agg_id: bigint
    user_id: number
    interval_start: Date
    interval_end: Date
    total_tx_bytes: bigint
    total_rx_bytes: bigint
    _count: Aggregated_bandwidth_logs_3hrCountAggregateOutputType | null
    _avg: Aggregated_bandwidth_logs_3hrAvgAggregateOutputType | null
    _sum: Aggregated_bandwidth_logs_3hrSumAggregateOutputType | null
    _min: Aggregated_bandwidth_logs_3hrMinAggregateOutputType | null
    _max: Aggregated_bandwidth_logs_3hrMaxAggregateOutputType | null
  }

  type GetAggregated_bandwidth_logs_3hrGroupByPayload<T extends aggregated_bandwidth_logs_3hrGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Aggregated_bandwidth_logs_3hrGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Aggregated_bandwidth_logs_3hrGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Aggregated_bandwidth_logs_3hrGroupByOutputType[P]>
            : GetScalarType<T[P], Aggregated_bandwidth_logs_3hrGroupByOutputType[P]>
        }
      >
    >


  export type aggregated_bandwidth_logs_3hrSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    agg_id?: boolean
    user_id?: boolean
    interval_start?: boolean
    interval_end?: boolean
    total_tx_bytes?: boolean
    total_rx_bytes?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aggregated_bandwidth_logs_3hr"]>



  export type aggregated_bandwidth_logs_3hrSelectScalar = {
    agg_id?: boolean
    user_id?: boolean
    interval_start?: boolean
    interval_end?: boolean
    total_tx_bytes?: boolean
    total_rx_bytes?: boolean
  }

  export type aggregated_bandwidth_logs_3hrOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"agg_id" | "user_id" | "interval_start" | "interval_end" | "total_tx_bytes" | "total_rx_bytes", ExtArgs["result"]["aggregated_bandwidth_logs_3hr"]>
  export type aggregated_bandwidth_logs_3hrInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $aggregated_bandwidth_logs_3hrPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "aggregated_bandwidth_logs_3hr"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      agg_id: bigint
      user_id: number
      interval_start: Date
      interval_end: Date
      total_tx_bytes: bigint
      total_rx_bytes: bigint
    }, ExtArgs["result"]["aggregated_bandwidth_logs_3hr"]>
    composites: {}
  }

  type aggregated_bandwidth_logs_3hrGetPayload<S extends boolean | null | undefined | aggregated_bandwidth_logs_3hrDefaultArgs> = $Result.GetResult<Prisma.$aggregated_bandwidth_logs_3hrPayload, S>

  type aggregated_bandwidth_logs_3hrCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<aggregated_bandwidth_logs_3hrFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Aggregated_bandwidth_logs_3hrCountAggregateInputType | true
    }

  export interface aggregated_bandwidth_logs_3hrDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['aggregated_bandwidth_logs_3hr'], meta: { name: 'aggregated_bandwidth_logs_3hr' } }
    /**
     * Find zero or one Aggregated_bandwidth_logs_3hr that matches the filter.
     * @param {aggregated_bandwidth_logs_3hrFindUniqueArgs} args - Arguments to find a Aggregated_bandwidth_logs_3hr
     * @example
     * // Get one Aggregated_bandwidth_logs_3hr
     * const aggregated_bandwidth_logs_3hr = await prisma.aggregated_bandwidth_logs_3hr.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends aggregated_bandwidth_logs_3hrFindUniqueArgs>(args: SelectSubset<T, aggregated_bandwidth_logs_3hrFindUniqueArgs<ExtArgs>>): Prisma__aggregated_bandwidth_logs_3hrClient<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_3hrPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Aggregated_bandwidth_logs_3hr that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {aggregated_bandwidth_logs_3hrFindUniqueOrThrowArgs} args - Arguments to find a Aggregated_bandwidth_logs_3hr
     * @example
     * // Get one Aggregated_bandwidth_logs_3hr
     * const aggregated_bandwidth_logs_3hr = await prisma.aggregated_bandwidth_logs_3hr.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends aggregated_bandwidth_logs_3hrFindUniqueOrThrowArgs>(args: SelectSubset<T, aggregated_bandwidth_logs_3hrFindUniqueOrThrowArgs<ExtArgs>>): Prisma__aggregated_bandwidth_logs_3hrClient<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_3hrPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Aggregated_bandwidth_logs_3hr that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aggregated_bandwidth_logs_3hrFindFirstArgs} args - Arguments to find a Aggregated_bandwidth_logs_3hr
     * @example
     * // Get one Aggregated_bandwidth_logs_3hr
     * const aggregated_bandwidth_logs_3hr = await prisma.aggregated_bandwidth_logs_3hr.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends aggregated_bandwidth_logs_3hrFindFirstArgs>(args?: SelectSubset<T, aggregated_bandwidth_logs_3hrFindFirstArgs<ExtArgs>>): Prisma__aggregated_bandwidth_logs_3hrClient<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_3hrPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Aggregated_bandwidth_logs_3hr that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aggregated_bandwidth_logs_3hrFindFirstOrThrowArgs} args - Arguments to find a Aggregated_bandwidth_logs_3hr
     * @example
     * // Get one Aggregated_bandwidth_logs_3hr
     * const aggregated_bandwidth_logs_3hr = await prisma.aggregated_bandwidth_logs_3hr.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends aggregated_bandwidth_logs_3hrFindFirstOrThrowArgs>(args?: SelectSubset<T, aggregated_bandwidth_logs_3hrFindFirstOrThrowArgs<ExtArgs>>): Prisma__aggregated_bandwidth_logs_3hrClient<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_3hrPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Aggregated_bandwidth_logs_3hrs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aggregated_bandwidth_logs_3hrFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Aggregated_bandwidth_logs_3hrs
     * const aggregated_bandwidth_logs_3hrs = await prisma.aggregated_bandwidth_logs_3hr.findMany()
     * 
     * // Get first 10 Aggregated_bandwidth_logs_3hrs
     * const aggregated_bandwidth_logs_3hrs = await prisma.aggregated_bandwidth_logs_3hr.findMany({ take: 10 })
     * 
     * // Only select the `agg_id`
     * const aggregated_bandwidth_logs_3hrWithAgg_idOnly = await prisma.aggregated_bandwidth_logs_3hr.findMany({ select: { agg_id: true } })
     * 
     */
    findMany<T extends aggregated_bandwidth_logs_3hrFindManyArgs>(args?: SelectSubset<T, aggregated_bandwidth_logs_3hrFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_3hrPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Aggregated_bandwidth_logs_3hr.
     * @param {aggregated_bandwidth_logs_3hrCreateArgs} args - Arguments to create a Aggregated_bandwidth_logs_3hr.
     * @example
     * // Create one Aggregated_bandwidth_logs_3hr
     * const Aggregated_bandwidth_logs_3hr = await prisma.aggregated_bandwidth_logs_3hr.create({
     *   data: {
     *     // ... data to create a Aggregated_bandwidth_logs_3hr
     *   }
     * })
     * 
     */
    create<T extends aggregated_bandwidth_logs_3hrCreateArgs>(args: SelectSubset<T, aggregated_bandwidth_logs_3hrCreateArgs<ExtArgs>>): Prisma__aggregated_bandwidth_logs_3hrClient<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_3hrPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Aggregated_bandwidth_logs_3hrs.
     * @param {aggregated_bandwidth_logs_3hrCreateManyArgs} args - Arguments to create many Aggregated_bandwidth_logs_3hrs.
     * @example
     * // Create many Aggregated_bandwidth_logs_3hrs
     * const aggregated_bandwidth_logs_3hr = await prisma.aggregated_bandwidth_logs_3hr.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends aggregated_bandwidth_logs_3hrCreateManyArgs>(args?: SelectSubset<T, aggregated_bandwidth_logs_3hrCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Aggregated_bandwidth_logs_3hr.
     * @param {aggregated_bandwidth_logs_3hrDeleteArgs} args - Arguments to delete one Aggregated_bandwidth_logs_3hr.
     * @example
     * // Delete one Aggregated_bandwidth_logs_3hr
     * const Aggregated_bandwidth_logs_3hr = await prisma.aggregated_bandwidth_logs_3hr.delete({
     *   where: {
     *     // ... filter to delete one Aggregated_bandwidth_logs_3hr
     *   }
     * })
     * 
     */
    delete<T extends aggregated_bandwidth_logs_3hrDeleteArgs>(args: SelectSubset<T, aggregated_bandwidth_logs_3hrDeleteArgs<ExtArgs>>): Prisma__aggregated_bandwidth_logs_3hrClient<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_3hrPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Aggregated_bandwidth_logs_3hr.
     * @param {aggregated_bandwidth_logs_3hrUpdateArgs} args - Arguments to update one Aggregated_bandwidth_logs_3hr.
     * @example
     * // Update one Aggregated_bandwidth_logs_3hr
     * const aggregated_bandwidth_logs_3hr = await prisma.aggregated_bandwidth_logs_3hr.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends aggregated_bandwidth_logs_3hrUpdateArgs>(args: SelectSubset<T, aggregated_bandwidth_logs_3hrUpdateArgs<ExtArgs>>): Prisma__aggregated_bandwidth_logs_3hrClient<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_3hrPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Aggregated_bandwidth_logs_3hrs.
     * @param {aggregated_bandwidth_logs_3hrDeleteManyArgs} args - Arguments to filter Aggregated_bandwidth_logs_3hrs to delete.
     * @example
     * // Delete a few Aggregated_bandwidth_logs_3hrs
     * const { count } = await prisma.aggregated_bandwidth_logs_3hr.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends aggregated_bandwidth_logs_3hrDeleteManyArgs>(args?: SelectSubset<T, aggregated_bandwidth_logs_3hrDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Aggregated_bandwidth_logs_3hrs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aggregated_bandwidth_logs_3hrUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Aggregated_bandwidth_logs_3hrs
     * const aggregated_bandwidth_logs_3hr = await prisma.aggregated_bandwidth_logs_3hr.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends aggregated_bandwidth_logs_3hrUpdateManyArgs>(args: SelectSubset<T, aggregated_bandwidth_logs_3hrUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Aggregated_bandwidth_logs_3hr.
     * @param {aggregated_bandwidth_logs_3hrUpsertArgs} args - Arguments to update or create a Aggregated_bandwidth_logs_3hr.
     * @example
     * // Update or create a Aggregated_bandwidth_logs_3hr
     * const aggregated_bandwidth_logs_3hr = await prisma.aggregated_bandwidth_logs_3hr.upsert({
     *   create: {
     *     // ... data to create a Aggregated_bandwidth_logs_3hr
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Aggregated_bandwidth_logs_3hr we want to update
     *   }
     * })
     */
    upsert<T extends aggregated_bandwidth_logs_3hrUpsertArgs>(args: SelectSubset<T, aggregated_bandwidth_logs_3hrUpsertArgs<ExtArgs>>): Prisma__aggregated_bandwidth_logs_3hrClient<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_3hrPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Aggregated_bandwidth_logs_3hrs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aggregated_bandwidth_logs_3hrCountArgs} args - Arguments to filter Aggregated_bandwidth_logs_3hrs to count.
     * @example
     * // Count the number of Aggregated_bandwidth_logs_3hrs
     * const count = await prisma.aggregated_bandwidth_logs_3hr.count({
     *   where: {
     *     // ... the filter for the Aggregated_bandwidth_logs_3hrs we want to count
     *   }
     * })
    **/
    count<T extends aggregated_bandwidth_logs_3hrCountArgs>(
      args?: Subset<T, aggregated_bandwidth_logs_3hrCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Aggregated_bandwidth_logs_3hrCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Aggregated_bandwidth_logs_3hr.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Aggregated_bandwidth_logs_3hrAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Aggregated_bandwidth_logs_3hrAggregateArgs>(args: Subset<T, Aggregated_bandwidth_logs_3hrAggregateArgs>): Prisma.PrismaPromise<GetAggregated_bandwidth_logs_3hrAggregateType<T>>

    /**
     * Group by Aggregated_bandwidth_logs_3hr.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aggregated_bandwidth_logs_3hrGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends aggregated_bandwidth_logs_3hrGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: aggregated_bandwidth_logs_3hrGroupByArgs['orderBy'] }
        : { orderBy?: aggregated_bandwidth_logs_3hrGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, aggregated_bandwidth_logs_3hrGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAggregated_bandwidth_logs_3hrGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the aggregated_bandwidth_logs_3hr model
   */
  readonly fields: aggregated_bandwidth_logs_3hrFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for aggregated_bandwidth_logs_3hr.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__aggregated_bandwidth_logs_3hrClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the aggregated_bandwidth_logs_3hr model
   */
  interface aggregated_bandwidth_logs_3hrFieldRefs {
    readonly agg_id: FieldRef<"aggregated_bandwidth_logs_3hr", 'BigInt'>
    readonly user_id: FieldRef<"aggregated_bandwidth_logs_3hr", 'Int'>
    readonly interval_start: FieldRef<"aggregated_bandwidth_logs_3hr", 'DateTime'>
    readonly interval_end: FieldRef<"aggregated_bandwidth_logs_3hr", 'DateTime'>
    readonly total_tx_bytes: FieldRef<"aggregated_bandwidth_logs_3hr", 'BigInt'>
    readonly total_rx_bytes: FieldRef<"aggregated_bandwidth_logs_3hr", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * aggregated_bandwidth_logs_3hr findUnique
   */
  export type aggregated_bandwidth_logs_3hrFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_3hr
     */
    select?: aggregated_bandwidth_logs_3hrSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_3hr
     */
    omit?: aggregated_bandwidth_logs_3hrOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_3hrInclude<ExtArgs> | null
    /**
     * Filter, which aggregated_bandwidth_logs_3hr to fetch.
     */
    where: aggregated_bandwidth_logs_3hrWhereUniqueInput
  }

  /**
   * aggregated_bandwidth_logs_3hr findUniqueOrThrow
   */
  export type aggregated_bandwidth_logs_3hrFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_3hr
     */
    select?: aggregated_bandwidth_logs_3hrSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_3hr
     */
    omit?: aggregated_bandwidth_logs_3hrOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_3hrInclude<ExtArgs> | null
    /**
     * Filter, which aggregated_bandwidth_logs_3hr to fetch.
     */
    where: aggregated_bandwidth_logs_3hrWhereUniqueInput
  }

  /**
   * aggregated_bandwidth_logs_3hr findFirst
   */
  export type aggregated_bandwidth_logs_3hrFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_3hr
     */
    select?: aggregated_bandwidth_logs_3hrSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_3hr
     */
    omit?: aggregated_bandwidth_logs_3hrOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_3hrInclude<ExtArgs> | null
    /**
     * Filter, which aggregated_bandwidth_logs_3hr to fetch.
     */
    where?: aggregated_bandwidth_logs_3hrWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aggregated_bandwidth_logs_3hrs to fetch.
     */
    orderBy?: aggregated_bandwidth_logs_3hrOrderByWithRelationInput | aggregated_bandwidth_logs_3hrOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for aggregated_bandwidth_logs_3hrs.
     */
    cursor?: aggregated_bandwidth_logs_3hrWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aggregated_bandwidth_logs_3hrs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aggregated_bandwidth_logs_3hrs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of aggregated_bandwidth_logs_3hrs.
     */
    distinct?: Aggregated_bandwidth_logs_3hrScalarFieldEnum | Aggregated_bandwidth_logs_3hrScalarFieldEnum[]
  }

  /**
   * aggregated_bandwidth_logs_3hr findFirstOrThrow
   */
  export type aggregated_bandwidth_logs_3hrFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_3hr
     */
    select?: aggregated_bandwidth_logs_3hrSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_3hr
     */
    omit?: aggregated_bandwidth_logs_3hrOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_3hrInclude<ExtArgs> | null
    /**
     * Filter, which aggregated_bandwidth_logs_3hr to fetch.
     */
    where?: aggregated_bandwidth_logs_3hrWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aggregated_bandwidth_logs_3hrs to fetch.
     */
    orderBy?: aggregated_bandwidth_logs_3hrOrderByWithRelationInput | aggregated_bandwidth_logs_3hrOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for aggregated_bandwidth_logs_3hrs.
     */
    cursor?: aggregated_bandwidth_logs_3hrWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aggregated_bandwidth_logs_3hrs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aggregated_bandwidth_logs_3hrs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of aggregated_bandwidth_logs_3hrs.
     */
    distinct?: Aggregated_bandwidth_logs_3hrScalarFieldEnum | Aggregated_bandwidth_logs_3hrScalarFieldEnum[]
  }

  /**
   * aggregated_bandwidth_logs_3hr findMany
   */
  export type aggregated_bandwidth_logs_3hrFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_3hr
     */
    select?: aggregated_bandwidth_logs_3hrSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_3hr
     */
    omit?: aggregated_bandwidth_logs_3hrOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_3hrInclude<ExtArgs> | null
    /**
     * Filter, which aggregated_bandwidth_logs_3hrs to fetch.
     */
    where?: aggregated_bandwidth_logs_3hrWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aggregated_bandwidth_logs_3hrs to fetch.
     */
    orderBy?: aggregated_bandwidth_logs_3hrOrderByWithRelationInput | aggregated_bandwidth_logs_3hrOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing aggregated_bandwidth_logs_3hrs.
     */
    cursor?: aggregated_bandwidth_logs_3hrWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aggregated_bandwidth_logs_3hrs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aggregated_bandwidth_logs_3hrs.
     */
    skip?: number
    distinct?: Aggregated_bandwidth_logs_3hrScalarFieldEnum | Aggregated_bandwidth_logs_3hrScalarFieldEnum[]
  }

  /**
   * aggregated_bandwidth_logs_3hr create
   */
  export type aggregated_bandwidth_logs_3hrCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_3hr
     */
    select?: aggregated_bandwidth_logs_3hrSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_3hr
     */
    omit?: aggregated_bandwidth_logs_3hrOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_3hrInclude<ExtArgs> | null
    /**
     * The data needed to create a aggregated_bandwidth_logs_3hr.
     */
    data: XOR<aggregated_bandwidth_logs_3hrCreateInput, aggregated_bandwidth_logs_3hrUncheckedCreateInput>
  }

  /**
   * aggregated_bandwidth_logs_3hr createMany
   */
  export type aggregated_bandwidth_logs_3hrCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many aggregated_bandwidth_logs_3hrs.
     */
    data: aggregated_bandwidth_logs_3hrCreateManyInput | aggregated_bandwidth_logs_3hrCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * aggregated_bandwidth_logs_3hr update
   */
  export type aggregated_bandwidth_logs_3hrUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_3hr
     */
    select?: aggregated_bandwidth_logs_3hrSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_3hr
     */
    omit?: aggregated_bandwidth_logs_3hrOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_3hrInclude<ExtArgs> | null
    /**
     * The data needed to update a aggregated_bandwidth_logs_3hr.
     */
    data: XOR<aggregated_bandwidth_logs_3hrUpdateInput, aggregated_bandwidth_logs_3hrUncheckedUpdateInput>
    /**
     * Choose, which aggregated_bandwidth_logs_3hr to update.
     */
    where: aggregated_bandwidth_logs_3hrWhereUniqueInput
  }

  /**
   * aggregated_bandwidth_logs_3hr updateMany
   */
  export type aggregated_bandwidth_logs_3hrUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update aggregated_bandwidth_logs_3hrs.
     */
    data: XOR<aggregated_bandwidth_logs_3hrUpdateManyMutationInput, aggregated_bandwidth_logs_3hrUncheckedUpdateManyInput>
    /**
     * Filter which aggregated_bandwidth_logs_3hrs to update
     */
    where?: aggregated_bandwidth_logs_3hrWhereInput
    /**
     * Limit how many aggregated_bandwidth_logs_3hrs to update.
     */
    limit?: number
  }

  /**
   * aggregated_bandwidth_logs_3hr upsert
   */
  export type aggregated_bandwidth_logs_3hrUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_3hr
     */
    select?: aggregated_bandwidth_logs_3hrSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_3hr
     */
    omit?: aggregated_bandwidth_logs_3hrOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_3hrInclude<ExtArgs> | null
    /**
     * The filter to search for the aggregated_bandwidth_logs_3hr to update in case it exists.
     */
    where: aggregated_bandwidth_logs_3hrWhereUniqueInput
    /**
     * In case the aggregated_bandwidth_logs_3hr found by the `where` argument doesn't exist, create a new aggregated_bandwidth_logs_3hr with this data.
     */
    create: XOR<aggregated_bandwidth_logs_3hrCreateInput, aggregated_bandwidth_logs_3hrUncheckedCreateInput>
    /**
     * In case the aggregated_bandwidth_logs_3hr was found with the provided `where` argument, update it with this data.
     */
    update: XOR<aggregated_bandwidth_logs_3hrUpdateInput, aggregated_bandwidth_logs_3hrUncheckedUpdateInput>
  }

  /**
   * aggregated_bandwidth_logs_3hr delete
   */
  export type aggregated_bandwidth_logs_3hrDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_3hr
     */
    select?: aggregated_bandwidth_logs_3hrSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_3hr
     */
    omit?: aggregated_bandwidth_logs_3hrOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_3hrInclude<ExtArgs> | null
    /**
     * Filter which aggregated_bandwidth_logs_3hr to delete.
     */
    where: aggregated_bandwidth_logs_3hrWhereUniqueInput
  }

  /**
   * aggregated_bandwidth_logs_3hr deleteMany
   */
  export type aggregated_bandwidth_logs_3hrDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which aggregated_bandwidth_logs_3hrs to delete
     */
    where?: aggregated_bandwidth_logs_3hrWhereInput
    /**
     * Limit how many aggregated_bandwidth_logs_3hrs to delete.
     */
    limit?: number
  }

  /**
   * aggregated_bandwidth_logs_3hr without action
   */
  export type aggregated_bandwidth_logs_3hrDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_3hr
     */
    select?: aggregated_bandwidth_logs_3hrSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_3hr
     */
    omit?: aggregated_bandwidth_logs_3hrOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_3hrInclude<ExtArgs> | null
  }


  /**
   * Model devices
   */

  export type AggregateDevices = {
    _count: DevicesCountAggregateOutputType | null
    _avg: DevicesAvgAggregateOutputType | null
    _sum: DevicesSumAggregateOutputType | null
    _min: DevicesMinAggregateOutputType | null
    _max: DevicesMaxAggregateOutputType | null
  }

  export type DevicesAvgAggregateOutputType = {
    id: number | null
    last_tx: number | null
    last_rx: number | null
  }

  export type DevicesSumAggregateOutputType = {
    id: number | null
    last_tx: bigint | null
    last_rx: bigint | null
  }

  export type DevicesMinAggregateOutputType = {
    id: number | null
    sn: string | null
    comment: string | null
    last_check: Date | null
    last_tx: bigint | null
    last_rx: bigint | null
  }

  export type DevicesMaxAggregateOutputType = {
    id: number | null
    sn: string | null
    comment: string | null
    last_check: Date | null
    last_tx: bigint | null
    last_rx: bigint | null
  }

  export type DevicesCountAggregateOutputType = {
    id: number
    sn: number
    comment: number
    last_check: number
    last_tx: number
    last_rx: number
    _all: number
  }


  export type DevicesAvgAggregateInputType = {
    id?: true
    last_tx?: true
    last_rx?: true
  }

  export type DevicesSumAggregateInputType = {
    id?: true
    last_tx?: true
    last_rx?: true
  }

  export type DevicesMinAggregateInputType = {
    id?: true
    sn?: true
    comment?: true
    last_check?: true
    last_tx?: true
    last_rx?: true
  }

  export type DevicesMaxAggregateInputType = {
    id?: true
    sn?: true
    comment?: true
    last_check?: true
    last_tx?: true
    last_rx?: true
  }

  export type DevicesCountAggregateInputType = {
    id?: true
    sn?: true
    comment?: true
    last_check?: true
    last_tx?: true
    last_rx?: true
    _all?: true
  }

  export type DevicesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which devices to aggregate.
     */
    where?: devicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of devices to fetch.
     */
    orderBy?: devicesOrderByWithRelationInput | devicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: devicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned devices
    **/
    _count?: true | DevicesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DevicesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DevicesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DevicesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DevicesMaxAggregateInputType
  }

  export type GetDevicesAggregateType<T extends DevicesAggregateArgs> = {
        [P in keyof T & keyof AggregateDevices]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDevices[P]>
      : GetScalarType<T[P], AggregateDevices[P]>
  }




  export type devicesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: devicesWhereInput
    orderBy?: devicesOrderByWithAggregationInput | devicesOrderByWithAggregationInput[]
    by: DevicesScalarFieldEnum[] | DevicesScalarFieldEnum
    having?: devicesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DevicesCountAggregateInputType | true
    _avg?: DevicesAvgAggregateInputType
    _sum?: DevicesSumAggregateInputType
    _min?: DevicesMinAggregateInputType
    _max?: DevicesMaxAggregateInputType
  }

  export type DevicesGroupByOutputType = {
    id: number
    sn: string
    comment: string | null
    last_check: Date | null
    last_tx: bigint | null
    last_rx: bigint | null
    _count: DevicesCountAggregateOutputType | null
    _avg: DevicesAvgAggregateOutputType | null
    _sum: DevicesSumAggregateOutputType | null
    _min: DevicesMinAggregateOutputType | null
    _max: DevicesMaxAggregateOutputType | null
  }

  type GetDevicesGroupByPayload<T extends devicesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DevicesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DevicesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DevicesGroupByOutputType[P]>
            : GetScalarType<T[P], DevicesGroupByOutputType[P]>
        }
      >
    >


  export type devicesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sn?: boolean
    comment?: boolean
    last_check?: boolean
    last_tx?: boolean
    last_rx?: boolean
    traffic?: boolean | devices$trafficArgs<ExtArgs>
    _count?: boolean | DevicesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["devices"]>



  export type devicesSelectScalar = {
    id?: boolean
    sn?: boolean
    comment?: boolean
    last_check?: boolean
    last_tx?: boolean
    last_rx?: boolean
  }

  export type devicesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sn" | "comment" | "last_check" | "last_tx" | "last_rx", ExtArgs["result"]["devices"]>
  export type devicesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    traffic?: boolean | devices$trafficArgs<ExtArgs>
    _count?: boolean | DevicesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $devicesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "devices"
    objects: {
      traffic: Prisma.$trafficPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sn: string
      comment: string | null
      last_check: Date | null
      last_tx: bigint | null
      last_rx: bigint | null
    }, ExtArgs["result"]["devices"]>
    composites: {}
  }

  type devicesGetPayload<S extends boolean | null | undefined | devicesDefaultArgs> = $Result.GetResult<Prisma.$devicesPayload, S>

  type devicesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<devicesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DevicesCountAggregateInputType | true
    }

  export interface devicesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['devices'], meta: { name: 'devices' } }
    /**
     * Find zero or one Devices that matches the filter.
     * @param {devicesFindUniqueArgs} args - Arguments to find a Devices
     * @example
     * // Get one Devices
     * const devices = await prisma.devices.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends devicesFindUniqueArgs>(args: SelectSubset<T, devicesFindUniqueArgs<ExtArgs>>): Prisma__devicesClient<$Result.GetResult<Prisma.$devicesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Devices that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {devicesFindUniqueOrThrowArgs} args - Arguments to find a Devices
     * @example
     * // Get one Devices
     * const devices = await prisma.devices.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends devicesFindUniqueOrThrowArgs>(args: SelectSubset<T, devicesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__devicesClient<$Result.GetResult<Prisma.$devicesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Devices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {devicesFindFirstArgs} args - Arguments to find a Devices
     * @example
     * // Get one Devices
     * const devices = await prisma.devices.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends devicesFindFirstArgs>(args?: SelectSubset<T, devicesFindFirstArgs<ExtArgs>>): Prisma__devicesClient<$Result.GetResult<Prisma.$devicesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Devices that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {devicesFindFirstOrThrowArgs} args - Arguments to find a Devices
     * @example
     * // Get one Devices
     * const devices = await prisma.devices.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends devicesFindFirstOrThrowArgs>(args?: SelectSubset<T, devicesFindFirstOrThrowArgs<ExtArgs>>): Prisma__devicesClient<$Result.GetResult<Prisma.$devicesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Devices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {devicesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Devices
     * const devices = await prisma.devices.findMany()
     * 
     * // Get first 10 Devices
     * const devices = await prisma.devices.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const devicesWithIdOnly = await prisma.devices.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends devicesFindManyArgs>(args?: SelectSubset<T, devicesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$devicesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Devices.
     * @param {devicesCreateArgs} args - Arguments to create a Devices.
     * @example
     * // Create one Devices
     * const Devices = await prisma.devices.create({
     *   data: {
     *     // ... data to create a Devices
     *   }
     * })
     * 
     */
    create<T extends devicesCreateArgs>(args: SelectSubset<T, devicesCreateArgs<ExtArgs>>): Prisma__devicesClient<$Result.GetResult<Prisma.$devicesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Devices.
     * @param {devicesCreateManyArgs} args - Arguments to create many Devices.
     * @example
     * // Create many Devices
     * const devices = await prisma.devices.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends devicesCreateManyArgs>(args?: SelectSubset<T, devicesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Devices.
     * @param {devicesDeleteArgs} args - Arguments to delete one Devices.
     * @example
     * // Delete one Devices
     * const Devices = await prisma.devices.delete({
     *   where: {
     *     // ... filter to delete one Devices
     *   }
     * })
     * 
     */
    delete<T extends devicesDeleteArgs>(args: SelectSubset<T, devicesDeleteArgs<ExtArgs>>): Prisma__devicesClient<$Result.GetResult<Prisma.$devicesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Devices.
     * @param {devicesUpdateArgs} args - Arguments to update one Devices.
     * @example
     * // Update one Devices
     * const devices = await prisma.devices.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends devicesUpdateArgs>(args: SelectSubset<T, devicesUpdateArgs<ExtArgs>>): Prisma__devicesClient<$Result.GetResult<Prisma.$devicesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Devices.
     * @param {devicesDeleteManyArgs} args - Arguments to filter Devices to delete.
     * @example
     * // Delete a few Devices
     * const { count } = await prisma.devices.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends devicesDeleteManyArgs>(args?: SelectSubset<T, devicesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {devicesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Devices
     * const devices = await prisma.devices.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends devicesUpdateManyArgs>(args: SelectSubset<T, devicesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Devices.
     * @param {devicesUpsertArgs} args - Arguments to update or create a Devices.
     * @example
     * // Update or create a Devices
     * const devices = await prisma.devices.upsert({
     *   create: {
     *     // ... data to create a Devices
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Devices we want to update
     *   }
     * })
     */
    upsert<T extends devicesUpsertArgs>(args: SelectSubset<T, devicesUpsertArgs<ExtArgs>>): Prisma__devicesClient<$Result.GetResult<Prisma.$devicesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {devicesCountArgs} args - Arguments to filter Devices to count.
     * @example
     * // Count the number of Devices
     * const count = await prisma.devices.count({
     *   where: {
     *     // ... the filter for the Devices we want to count
     *   }
     * })
    **/
    count<T extends devicesCountArgs>(
      args?: Subset<T, devicesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DevicesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DevicesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DevicesAggregateArgs>(args: Subset<T, DevicesAggregateArgs>): Prisma.PrismaPromise<GetDevicesAggregateType<T>>

    /**
     * Group by Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {devicesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends devicesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: devicesGroupByArgs['orderBy'] }
        : { orderBy?: devicesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, devicesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDevicesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the devices model
   */
  readonly fields: devicesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for devices.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__devicesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    traffic<T extends devices$trafficArgs<ExtArgs> = {}>(args?: Subset<T, devices$trafficArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trafficPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the devices model
   */
  interface devicesFieldRefs {
    readonly id: FieldRef<"devices", 'Int'>
    readonly sn: FieldRef<"devices", 'String'>
    readonly comment: FieldRef<"devices", 'String'>
    readonly last_check: FieldRef<"devices", 'DateTime'>
    readonly last_tx: FieldRef<"devices", 'BigInt'>
    readonly last_rx: FieldRef<"devices", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * devices findUnique
   */
  export type devicesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the devices
     */
    omit?: devicesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: devicesInclude<ExtArgs> | null
    /**
     * Filter, which devices to fetch.
     */
    where: devicesWhereUniqueInput
  }

  /**
   * devices findUniqueOrThrow
   */
  export type devicesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the devices
     */
    omit?: devicesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: devicesInclude<ExtArgs> | null
    /**
     * Filter, which devices to fetch.
     */
    where: devicesWhereUniqueInput
  }

  /**
   * devices findFirst
   */
  export type devicesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the devices
     */
    omit?: devicesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: devicesInclude<ExtArgs> | null
    /**
     * Filter, which devices to fetch.
     */
    where?: devicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of devices to fetch.
     */
    orderBy?: devicesOrderByWithRelationInput | devicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for devices.
     */
    cursor?: devicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of devices.
     */
    distinct?: DevicesScalarFieldEnum | DevicesScalarFieldEnum[]
  }

  /**
   * devices findFirstOrThrow
   */
  export type devicesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the devices
     */
    omit?: devicesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: devicesInclude<ExtArgs> | null
    /**
     * Filter, which devices to fetch.
     */
    where?: devicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of devices to fetch.
     */
    orderBy?: devicesOrderByWithRelationInput | devicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for devices.
     */
    cursor?: devicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of devices.
     */
    distinct?: DevicesScalarFieldEnum | DevicesScalarFieldEnum[]
  }

  /**
   * devices findMany
   */
  export type devicesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the devices
     */
    omit?: devicesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: devicesInclude<ExtArgs> | null
    /**
     * Filter, which devices to fetch.
     */
    where?: devicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of devices to fetch.
     */
    orderBy?: devicesOrderByWithRelationInput | devicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing devices.
     */
    cursor?: devicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` devices.
     */
    skip?: number
    distinct?: DevicesScalarFieldEnum | DevicesScalarFieldEnum[]
  }

  /**
   * devices create
   */
  export type devicesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the devices
     */
    omit?: devicesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: devicesInclude<ExtArgs> | null
    /**
     * The data needed to create a devices.
     */
    data: XOR<devicesCreateInput, devicesUncheckedCreateInput>
  }

  /**
   * devices createMany
   */
  export type devicesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many devices.
     */
    data: devicesCreateManyInput | devicesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * devices update
   */
  export type devicesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the devices
     */
    omit?: devicesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: devicesInclude<ExtArgs> | null
    /**
     * The data needed to update a devices.
     */
    data: XOR<devicesUpdateInput, devicesUncheckedUpdateInput>
    /**
     * Choose, which devices to update.
     */
    where: devicesWhereUniqueInput
  }

  /**
   * devices updateMany
   */
  export type devicesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update devices.
     */
    data: XOR<devicesUpdateManyMutationInput, devicesUncheckedUpdateManyInput>
    /**
     * Filter which devices to update
     */
    where?: devicesWhereInput
    /**
     * Limit how many devices to update.
     */
    limit?: number
  }

  /**
   * devices upsert
   */
  export type devicesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the devices
     */
    omit?: devicesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: devicesInclude<ExtArgs> | null
    /**
     * The filter to search for the devices to update in case it exists.
     */
    where: devicesWhereUniqueInput
    /**
     * In case the devices found by the `where` argument doesn't exist, create a new devices with this data.
     */
    create: XOR<devicesCreateInput, devicesUncheckedCreateInput>
    /**
     * In case the devices was found with the provided `where` argument, update it with this data.
     */
    update: XOR<devicesUpdateInput, devicesUncheckedUpdateInput>
  }

  /**
   * devices delete
   */
  export type devicesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the devices
     */
    omit?: devicesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: devicesInclude<ExtArgs> | null
    /**
     * Filter which devices to delete.
     */
    where: devicesWhereUniqueInput
  }

  /**
   * devices deleteMany
   */
  export type devicesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which devices to delete
     */
    where?: devicesWhereInput
    /**
     * Limit how many devices to delete.
     */
    limit?: number
  }

  /**
   * devices.traffic
   */
  export type devices$trafficArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traffic
     */
    select?: trafficSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traffic
     */
    omit?: trafficOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trafficInclude<ExtArgs> | null
    where?: trafficWhereInput
    orderBy?: trafficOrderByWithRelationInput | trafficOrderByWithRelationInput[]
    cursor?: trafficWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrafficScalarFieldEnum | TrafficScalarFieldEnum[]
  }

  /**
   * devices without action
   */
  export type devicesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the devices
     */
    omit?: devicesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: devicesInclude<ExtArgs> | null
  }


  /**
   * Model raw_bandwidth_logs
   */

  export type AggregateRaw_bandwidth_logs = {
    _count: Raw_bandwidth_logsCountAggregateOutputType | null
    _avg: Raw_bandwidth_logsAvgAggregateOutputType | null
    _sum: Raw_bandwidth_logsSumAggregateOutputType | null
    _min: Raw_bandwidth_logsMinAggregateOutputType | null
    _max: Raw_bandwidth_logsMaxAggregateOutputType | null
  }

  export type Raw_bandwidth_logsAvgAggregateOutputType = {
    log_id: number | null
    user_id: number | null
    tx_bytes: number | null
    rx_bytes: number | null
  }

  export type Raw_bandwidth_logsSumAggregateOutputType = {
    log_id: bigint | null
    user_id: number | null
    tx_bytes: bigint | null
    rx_bytes: bigint | null
  }

  export type Raw_bandwidth_logsMinAggregateOutputType = {
    log_id: bigint | null
    user_id: number | null
    source_ip: string | null
    destination_ip: string | null
    tx_bytes: bigint | null
    rx_bytes: bigint | null
    timestamp: Date | null
  }

  export type Raw_bandwidth_logsMaxAggregateOutputType = {
    log_id: bigint | null
    user_id: number | null
    source_ip: string | null
    destination_ip: string | null
    tx_bytes: bigint | null
    rx_bytes: bigint | null
    timestamp: Date | null
  }

  export type Raw_bandwidth_logsCountAggregateOutputType = {
    log_id: number
    user_id: number
    source_ip: number
    destination_ip: number
    tx_bytes: number
    rx_bytes: number
    timestamp: number
    _all: number
  }


  export type Raw_bandwidth_logsAvgAggregateInputType = {
    log_id?: true
    user_id?: true
    tx_bytes?: true
    rx_bytes?: true
  }

  export type Raw_bandwidth_logsSumAggregateInputType = {
    log_id?: true
    user_id?: true
    tx_bytes?: true
    rx_bytes?: true
  }

  export type Raw_bandwidth_logsMinAggregateInputType = {
    log_id?: true
    user_id?: true
    source_ip?: true
    destination_ip?: true
    tx_bytes?: true
    rx_bytes?: true
    timestamp?: true
  }

  export type Raw_bandwidth_logsMaxAggregateInputType = {
    log_id?: true
    user_id?: true
    source_ip?: true
    destination_ip?: true
    tx_bytes?: true
    rx_bytes?: true
    timestamp?: true
  }

  export type Raw_bandwidth_logsCountAggregateInputType = {
    log_id?: true
    user_id?: true
    source_ip?: true
    destination_ip?: true
    tx_bytes?: true
    rx_bytes?: true
    timestamp?: true
    _all?: true
  }

  export type Raw_bandwidth_logsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which raw_bandwidth_logs to aggregate.
     */
    where?: raw_bandwidth_logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of raw_bandwidth_logs to fetch.
     */
    orderBy?: raw_bandwidth_logsOrderByWithRelationInput | raw_bandwidth_logsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: raw_bandwidth_logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` raw_bandwidth_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` raw_bandwidth_logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned raw_bandwidth_logs
    **/
    _count?: true | Raw_bandwidth_logsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Raw_bandwidth_logsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Raw_bandwidth_logsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Raw_bandwidth_logsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Raw_bandwidth_logsMaxAggregateInputType
  }

  export type GetRaw_bandwidth_logsAggregateType<T extends Raw_bandwidth_logsAggregateArgs> = {
        [P in keyof T & keyof AggregateRaw_bandwidth_logs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRaw_bandwidth_logs[P]>
      : GetScalarType<T[P], AggregateRaw_bandwidth_logs[P]>
  }




  export type raw_bandwidth_logsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: raw_bandwidth_logsWhereInput
    orderBy?: raw_bandwidth_logsOrderByWithAggregationInput | raw_bandwidth_logsOrderByWithAggregationInput[]
    by: Raw_bandwidth_logsScalarFieldEnum[] | Raw_bandwidth_logsScalarFieldEnum
    having?: raw_bandwidth_logsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Raw_bandwidth_logsCountAggregateInputType | true
    _avg?: Raw_bandwidth_logsAvgAggregateInputType
    _sum?: Raw_bandwidth_logsSumAggregateInputType
    _min?: Raw_bandwidth_logsMinAggregateInputType
    _max?: Raw_bandwidth_logsMaxAggregateInputType
  }

  export type Raw_bandwidth_logsGroupByOutputType = {
    log_id: bigint
    user_id: number
    source_ip: string | null
    destination_ip: string | null
    tx_bytes: bigint
    rx_bytes: bigint
    timestamp: Date
    _count: Raw_bandwidth_logsCountAggregateOutputType | null
    _avg: Raw_bandwidth_logsAvgAggregateOutputType | null
    _sum: Raw_bandwidth_logsSumAggregateOutputType | null
    _min: Raw_bandwidth_logsMinAggregateOutputType | null
    _max: Raw_bandwidth_logsMaxAggregateOutputType | null
  }

  type GetRaw_bandwidth_logsGroupByPayload<T extends raw_bandwidth_logsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Raw_bandwidth_logsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Raw_bandwidth_logsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Raw_bandwidth_logsGroupByOutputType[P]>
            : GetScalarType<T[P], Raw_bandwidth_logsGroupByOutputType[P]>
        }
      >
    >


  export type raw_bandwidth_logsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    log_id?: boolean
    user_id?: boolean
    source_ip?: boolean
    destination_ip?: boolean
    tx_bytes?: boolean
    rx_bytes?: boolean
    timestamp?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["raw_bandwidth_logs"]>



  export type raw_bandwidth_logsSelectScalar = {
    log_id?: boolean
    user_id?: boolean
    source_ip?: boolean
    destination_ip?: boolean
    tx_bytes?: boolean
    rx_bytes?: boolean
    timestamp?: boolean
  }

  export type raw_bandwidth_logsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"log_id" | "user_id" | "source_ip" | "destination_ip" | "tx_bytes" | "rx_bytes" | "timestamp", ExtArgs["result"]["raw_bandwidth_logs"]>
  export type raw_bandwidth_logsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $raw_bandwidth_logsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "raw_bandwidth_logs"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      log_id: bigint
      user_id: number
      source_ip: string | null
      destination_ip: string | null
      tx_bytes: bigint
      rx_bytes: bigint
      timestamp: Date
    }, ExtArgs["result"]["raw_bandwidth_logs"]>
    composites: {}
  }

  type raw_bandwidth_logsGetPayload<S extends boolean | null | undefined | raw_bandwidth_logsDefaultArgs> = $Result.GetResult<Prisma.$raw_bandwidth_logsPayload, S>

  type raw_bandwidth_logsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<raw_bandwidth_logsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Raw_bandwidth_logsCountAggregateInputType | true
    }

  export interface raw_bandwidth_logsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['raw_bandwidth_logs'], meta: { name: 'raw_bandwidth_logs' } }
    /**
     * Find zero or one Raw_bandwidth_logs that matches the filter.
     * @param {raw_bandwidth_logsFindUniqueArgs} args - Arguments to find a Raw_bandwidth_logs
     * @example
     * // Get one Raw_bandwidth_logs
     * const raw_bandwidth_logs = await prisma.raw_bandwidth_logs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends raw_bandwidth_logsFindUniqueArgs>(args: SelectSubset<T, raw_bandwidth_logsFindUniqueArgs<ExtArgs>>): Prisma__raw_bandwidth_logsClient<$Result.GetResult<Prisma.$raw_bandwidth_logsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Raw_bandwidth_logs that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {raw_bandwidth_logsFindUniqueOrThrowArgs} args - Arguments to find a Raw_bandwidth_logs
     * @example
     * // Get one Raw_bandwidth_logs
     * const raw_bandwidth_logs = await prisma.raw_bandwidth_logs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends raw_bandwidth_logsFindUniqueOrThrowArgs>(args: SelectSubset<T, raw_bandwidth_logsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__raw_bandwidth_logsClient<$Result.GetResult<Prisma.$raw_bandwidth_logsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Raw_bandwidth_logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {raw_bandwidth_logsFindFirstArgs} args - Arguments to find a Raw_bandwidth_logs
     * @example
     * // Get one Raw_bandwidth_logs
     * const raw_bandwidth_logs = await prisma.raw_bandwidth_logs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends raw_bandwidth_logsFindFirstArgs>(args?: SelectSubset<T, raw_bandwidth_logsFindFirstArgs<ExtArgs>>): Prisma__raw_bandwidth_logsClient<$Result.GetResult<Prisma.$raw_bandwidth_logsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Raw_bandwidth_logs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {raw_bandwidth_logsFindFirstOrThrowArgs} args - Arguments to find a Raw_bandwidth_logs
     * @example
     * // Get one Raw_bandwidth_logs
     * const raw_bandwidth_logs = await prisma.raw_bandwidth_logs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends raw_bandwidth_logsFindFirstOrThrowArgs>(args?: SelectSubset<T, raw_bandwidth_logsFindFirstOrThrowArgs<ExtArgs>>): Prisma__raw_bandwidth_logsClient<$Result.GetResult<Prisma.$raw_bandwidth_logsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Raw_bandwidth_logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {raw_bandwidth_logsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Raw_bandwidth_logs
     * const raw_bandwidth_logs = await prisma.raw_bandwidth_logs.findMany()
     * 
     * // Get first 10 Raw_bandwidth_logs
     * const raw_bandwidth_logs = await prisma.raw_bandwidth_logs.findMany({ take: 10 })
     * 
     * // Only select the `log_id`
     * const raw_bandwidth_logsWithLog_idOnly = await prisma.raw_bandwidth_logs.findMany({ select: { log_id: true } })
     * 
     */
    findMany<T extends raw_bandwidth_logsFindManyArgs>(args?: SelectSubset<T, raw_bandwidth_logsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$raw_bandwidth_logsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Raw_bandwidth_logs.
     * @param {raw_bandwidth_logsCreateArgs} args - Arguments to create a Raw_bandwidth_logs.
     * @example
     * // Create one Raw_bandwidth_logs
     * const Raw_bandwidth_logs = await prisma.raw_bandwidth_logs.create({
     *   data: {
     *     // ... data to create a Raw_bandwidth_logs
     *   }
     * })
     * 
     */
    create<T extends raw_bandwidth_logsCreateArgs>(args: SelectSubset<T, raw_bandwidth_logsCreateArgs<ExtArgs>>): Prisma__raw_bandwidth_logsClient<$Result.GetResult<Prisma.$raw_bandwidth_logsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Raw_bandwidth_logs.
     * @param {raw_bandwidth_logsCreateManyArgs} args - Arguments to create many Raw_bandwidth_logs.
     * @example
     * // Create many Raw_bandwidth_logs
     * const raw_bandwidth_logs = await prisma.raw_bandwidth_logs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends raw_bandwidth_logsCreateManyArgs>(args?: SelectSubset<T, raw_bandwidth_logsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Raw_bandwidth_logs.
     * @param {raw_bandwidth_logsDeleteArgs} args - Arguments to delete one Raw_bandwidth_logs.
     * @example
     * // Delete one Raw_bandwidth_logs
     * const Raw_bandwidth_logs = await prisma.raw_bandwidth_logs.delete({
     *   where: {
     *     // ... filter to delete one Raw_bandwidth_logs
     *   }
     * })
     * 
     */
    delete<T extends raw_bandwidth_logsDeleteArgs>(args: SelectSubset<T, raw_bandwidth_logsDeleteArgs<ExtArgs>>): Prisma__raw_bandwidth_logsClient<$Result.GetResult<Prisma.$raw_bandwidth_logsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Raw_bandwidth_logs.
     * @param {raw_bandwidth_logsUpdateArgs} args - Arguments to update one Raw_bandwidth_logs.
     * @example
     * // Update one Raw_bandwidth_logs
     * const raw_bandwidth_logs = await prisma.raw_bandwidth_logs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends raw_bandwidth_logsUpdateArgs>(args: SelectSubset<T, raw_bandwidth_logsUpdateArgs<ExtArgs>>): Prisma__raw_bandwidth_logsClient<$Result.GetResult<Prisma.$raw_bandwidth_logsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Raw_bandwidth_logs.
     * @param {raw_bandwidth_logsDeleteManyArgs} args - Arguments to filter Raw_bandwidth_logs to delete.
     * @example
     * // Delete a few Raw_bandwidth_logs
     * const { count } = await prisma.raw_bandwidth_logs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends raw_bandwidth_logsDeleteManyArgs>(args?: SelectSubset<T, raw_bandwidth_logsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Raw_bandwidth_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {raw_bandwidth_logsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Raw_bandwidth_logs
     * const raw_bandwidth_logs = await prisma.raw_bandwidth_logs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends raw_bandwidth_logsUpdateManyArgs>(args: SelectSubset<T, raw_bandwidth_logsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Raw_bandwidth_logs.
     * @param {raw_bandwidth_logsUpsertArgs} args - Arguments to update or create a Raw_bandwidth_logs.
     * @example
     * // Update or create a Raw_bandwidth_logs
     * const raw_bandwidth_logs = await prisma.raw_bandwidth_logs.upsert({
     *   create: {
     *     // ... data to create a Raw_bandwidth_logs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Raw_bandwidth_logs we want to update
     *   }
     * })
     */
    upsert<T extends raw_bandwidth_logsUpsertArgs>(args: SelectSubset<T, raw_bandwidth_logsUpsertArgs<ExtArgs>>): Prisma__raw_bandwidth_logsClient<$Result.GetResult<Prisma.$raw_bandwidth_logsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Raw_bandwidth_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {raw_bandwidth_logsCountArgs} args - Arguments to filter Raw_bandwidth_logs to count.
     * @example
     * // Count the number of Raw_bandwidth_logs
     * const count = await prisma.raw_bandwidth_logs.count({
     *   where: {
     *     // ... the filter for the Raw_bandwidth_logs we want to count
     *   }
     * })
    **/
    count<T extends raw_bandwidth_logsCountArgs>(
      args?: Subset<T, raw_bandwidth_logsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Raw_bandwidth_logsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Raw_bandwidth_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Raw_bandwidth_logsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Raw_bandwidth_logsAggregateArgs>(args: Subset<T, Raw_bandwidth_logsAggregateArgs>): Prisma.PrismaPromise<GetRaw_bandwidth_logsAggregateType<T>>

    /**
     * Group by Raw_bandwidth_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {raw_bandwidth_logsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends raw_bandwidth_logsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: raw_bandwidth_logsGroupByArgs['orderBy'] }
        : { orderBy?: raw_bandwidth_logsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, raw_bandwidth_logsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRaw_bandwidth_logsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the raw_bandwidth_logs model
   */
  readonly fields: raw_bandwidth_logsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for raw_bandwidth_logs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__raw_bandwidth_logsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the raw_bandwidth_logs model
   */
  interface raw_bandwidth_logsFieldRefs {
    readonly log_id: FieldRef<"raw_bandwidth_logs", 'BigInt'>
    readonly user_id: FieldRef<"raw_bandwidth_logs", 'Int'>
    readonly source_ip: FieldRef<"raw_bandwidth_logs", 'String'>
    readonly destination_ip: FieldRef<"raw_bandwidth_logs", 'String'>
    readonly tx_bytes: FieldRef<"raw_bandwidth_logs", 'BigInt'>
    readonly rx_bytes: FieldRef<"raw_bandwidth_logs", 'BigInt'>
    readonly timestamp: FieldRef<"raw_bandwidth_logs", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * raw_bandwidth_logs findUnique
   */
  export type raw_bandwidth_logsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_bandwidth_logs
     */
    select?: raw_bandwidth_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_bandwidth_logs
     */
    omit?: raw_bandwidth_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_bandwidth_logsInclude<ExtArgs> | null
    /**
     * Filter, which raw_bandwidth_logs to fetch.
     */
    where: raw_bandwidth_logsWhereUniqueInput
  }

  /**
   * raw_bandwidth_logs findUniqueOrThrow
   */
  export type raw_bandwidth_logsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_bandwidth_logs
     */
    select?: raw_bandwidth_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_bandwidth_logs
     */
    omit?: raw_bandwidth_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_bandwidth_logsInclude<ExtArgs> | null
    /**
     * Filter, which raw_bandwidth_logs to fetch.
     */
    where: raw_bandwidth_logsWhereUniqueInput
  }

  /**
   * raw_bandwidth_logs findFirst
   */
  export type raw_bandwidth_logsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_bandwidth_logs
     */
    select?: raw_bandwidth_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_bandwidth_logs
     */
    omit?: raw_bandwidth_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_bandwidth_logsInclude<ExtArgs> | null
    /**
     * Filter, which raw_bandwidth_logs to fetch.
     */
    where?: raw_bandwidth_logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of raw_bandwidth_logs to fetch.
     */
    orderBy?: raw_bandwidth_logsOrderByWithRelationInput | raw_bandwidth_logsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for raw_bandwidth_logs.
     */
    cursor?: raw_bandwidth_logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` raw_bandwidth_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` raw_bandwidth_logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of raw_bandwidth_logs.
     */
    distinct?: Raw_bandwidth_logsScalarFieldEnum | Raw_bandwidth_logsScalarFieldEnum[]
  }

  /**
   * raw_bandwidth_logs findFirstOrThrow
   */
  export type raw_bandwidth_logsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_bandwidth_logs
     */
    select?: raw_bandwidth_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_bandwidth_logs
     */
    omit?: raw_bandwidth_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_bandwidth_logsInclude<ExtArgs> | null
    /**
     * Filter, which raw_bandwidth_logs to fetch.
     */
    where?: raw_bandwidth_logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of raw_bandwidth_logs to fetch.
     */
    orderBy?: raw_bandwidth_logsOrderByWithRelationInput | raw_bandwidth_logsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for raw_bandwidth_logs.
     */
    cursor?: raw_bandwidth_logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` raw_bandwidth_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` raw_bandwidth_logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of raw_bandwidth_logs.
     */
    distinct?: Raw_bandwidth_logsScalarFieldEnum | Raw_bandwidth_logsScalarFieldEnum[]
  }

  /**
   * raw_bandwidth_logs findMany
   */
  export type raw_bandwidth_logsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_bandwidth_logs
     */
    select?: raw_bandwidth_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_bandwidth_logs
     */
    omit?: raw_bandwidth_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_bandwidth_logsInclude<ExtArgs> | null
    /**
     * Filter, which raw_bandwidth_logs to fetch.
     */
    where?: raw_bandwidth_logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of raw_bandwidth_logs to fetch.
     */
    orderBy?: raw_bandwidth_logsOrderByWithRelationInput | raw_bandwidth_logsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing raw_bandwidth_logs.
     */
    cursor?: raw_bandwidth_logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` raw_bandwidth_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` raw_bandwidth_logs.
     */
    skip?: number
    distinct?: Raw_bandwidth_logsScalarFieldEnum | Raw_bandwidth_logsScalarFieldEnum[]
  }

  /**
   * raw_bandwidth_logs create
   */
  export type raw_bandwidth_logsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_bandwidth_logs
     */
    select?: raw_bandwidth_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_bandwidth_logs
     */
    omit?: raw_bandwidth_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_bandwidth_logsInclude<ExtArgs> | null
    /**
     * The data needed to create a raw_bandwidth_logs.
     */
    data: XOR<raw_bandwidth_logsCreateInput, raw_bandwidth_logsUncheckedCreateInput>
  }

  /**
   * raw_bandwidth_logs createMany
   */
  export type raw_bandwidth_logsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many raw_bandwidth_logs.
     */
    data: raw_bandwidth_logsCreateManyInput | raw_bandwidth_logsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * raw_bandwidth_logs update
   */
  export type raw_bandwidth_logsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_bandwidth_logs
     */
    select?: raw_bandwidth_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_bandwidth_logs
     */
    omit?: raw_bandwidth_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_bandwidth_logsInclude<ExtArgs> | null
    /**
     * The data needed to update a raw_bandwidth_logs.
     */
    data: XOR<raw_bandwidth_logsUpdateInput, raw_bandwidth_logsUncheckedUpdateInput>
    /**
     * Choose, which raw_bandwidth_logs to update.
     */
    where: raw_bandwidth_logsWhereUniqueInput
  }

  /**
   * raw_bandwidth_logs updateMany
   */
  export type raw_bandwidth_logsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update raw_bandwidth_logs.
     */
    data: XOR<raw_bandwidth_logsUpdateManyMutationInput, raw_bandwidth_logsUncheckedUpdateManyInput>
    /**
     * Filter which raw_bandwidth_logs to update
     */
    where?: raw_bandwidth_logsWhereInput
    /**
     * Limit how many raw_bandwidth_logs to update.
     */
    limit?: number
  }

  /**
   * raw_bandwidth_logs upsert
   */
  export type raw_bandwidth_logsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_bandwidth_logs
     */
    select?: raw_bandwidth_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_bandwidth_logs
     */
    omit?: raw_bandwidth_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_bandwidth_logsInclude<ExtArgs> | null
    /**
     * The filter to search for the raw_bandwidth_logs to update in case it exists.
     */
    where: raw_bandwidth_logsWhereUniqueInput
    /**
     * In case the raw_bandwidth_logs found by the `where` argument doesn't exist, create a new raw_bandwidth_logs with this data.
     */
    create: XOR<raw_bandwidth_logsCreateInput, raw_bandwidth_logsUncheckedCreateInput>
    /**
     * In case the raw_bandwidth_logs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<raw_bandwidth_logsUpdateInput, raw_bandwidth_logsUncheckedUpdateInput>
  }

  /**
   * raw_bandwidth_logs delete
   */
  export type raw_bandwidth_logsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_bandwidth_logs
     */
    select?: raw_bandwidth_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_bandwidth_logs
     */
    omit?: raw_bandwidth_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_bandwidth_logsInclude<ExtArgs> | null
    /**
     * Filter which raw_bandwidth_logs to delete.
     */
    where: raw_bandwidth_logsWhereUniqueInput
  }

  /**
   * raw_bandwidth_logs deleteMany
   */
  export type raw_bandwidth_logsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which raw_bandwidth_logs to delete
     */
    where?: raw_bandwidth_logsWhereInput
    /**
     * Limit how many raw_bandwidth_logs to delete.
     */
    limit?: number
  }

  /**
   * raw_bandwidth_logs without action
   */
  export type raw_bandwidth_logsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_bandwidth_logs
     */
    select?: raw_bandwidth_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_bandwidth_logs
     */
    omit?: raw_bandwidth_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_bandwidth_logsInclude<ExtArgs> | null
  }


  /**
   * Model traffic
   */

  export type AggregateTraffic = {
    _count: TrafficCountAggregateOutputType | null
    _avg: TrafficAvgAggregateOutputType | null
    _sum: TrafficSumAggregateOutputType | null
    _min: TrafficMinAggregateOutputType | null
    _max: TrafficMaxAggregateOutputType | null
  }

  export type TrafficAvgAggregateOutputType = {
    id: number | null
    device_id: number | null
    tx: number | null
    rx: number | null
  }

  export type TrafficSumAggregateOutputType = {
    id: number | null
    device_id: number | null
    tx: bigint | null
    rx: bigint | null
  }

  export type TrafficMinAggregateOutputType = {
    id: number | null
    device_id: number | null
    timestamp: Date | null
    tx: bigint | null
    rx: bigint | null
  }

  export type TrafficMaxAggregateOutputType = {
    id: number | null
    device_id: number | null
    timestamp: Date | null
    tx: bigint | null
    rx: bigint | null
  }

  export type TrafficCountAggregateOutputType = {
    id: number
    device_id: number
    timestamp: number
    tx: number
    rx: number
    _all: number
  }


  export type TrafficAvgAggregateInputType = {
    id?: true
    device_id?: true
    tx?: true
    rx?: true
  }

  export type TrafficSumAggregateInputType = {
    id?: true
    device_id?: true
    tx?: true
    rx?: true
  }

  export type TrafficMinAggregateInputType = {
    id?: true
    device_id?: true
    timestamp?: true
    tx?: true
    rx?: true
  }

  export type TrafficMaxAggregateInputType = {
    id?: true
    device_id?: true
    timestamp?: true
    tx?: true
    rx?: true
  }

  export type TrafficCountAggregateInputType = {
    id?: true
    device_id?: true
    timestamp?: true
    tx?: true
    rx?: true
    _all?: true
  }

  export type TrafficAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which traffic to aggregate.
     */
    where?: trafficWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of traffic to fetch.
     */
    orderBy?: trafficOrderByWithRelationInput | trafficOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: trafficWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` traffic from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` traffic.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned traffic
    **/
    _count?: true | TrafficCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrafficAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrafficSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrafficMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrafficMaxAggregateInputType
  }

  export type GetTrafficAggregateType<T extends TrafficAggregateArgs> = {
        [P in keyof T & keyof AggregateTraffic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTraffic[P]>
      : GetScalarType<T[P], AggregateTraffic[P]>
  }




  export type trafficGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trafficWhereInput
    orderBy?: trafficOrderByWithAggregationInput | trafficOrderByWithAggregationInput[]
    by: TrafficScalarFieldEnum[] | TrafficScalarFieldEnum
    having?: trafficScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrafficCountAggregateInputType | true
    _avg?: TrafficAvgAggregateInputType
    _sum?: TrafficSumAggregateInputType
    _min?: TrafficMinAggregateInputType
    _max?: TrafficMaxAggregateInputType
  }

  export type TrafficGroupByOutputType = {
    id: number
    device_id: number
    timestamp: Date | null
    tx: bigint | null
    rx: bigint | null
    _count: TrafficCountAggregateOutputType | null
    _avg: TrafficAvgAggregateOutputType | null
    _sum: TrafficSumAggregateOutputType | null
    _min: TrafficMinAggregateOutputType | null
    _max: TrafficMaxAggregateOutputType | null
  }

  type GetTrafficGroupByPayload<T extends trafficGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrafficGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrafficGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrafficGroupByOutputType[P]>
            : GetScalarType<T[P], TrafficGroupByOutputType[P]>
        }
      >
    >


  export type trafficSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    device_id?: boolean
    timestamp?: boolean
    tx?: boolean
    rx?: boolean
    devices?: boolean | devicesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["traffic"]>



  export type trafficSelectScalar = {
    id?: boolean
    device_id?: boolean
    timestamp?: boolean
    tx?: boolean
    rx?: boolean
  }

  export type trafficOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "device_id" | "timestamp" | "tx" | "rx", ExtArgs["result"]["traffic"]>
  export type trafficInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    devices?: boolean | devicesDefaultArgs<ExtArgs>
  }

  export type $trafficPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "traffic"
    objects: {
      devices: Prisma.$devicesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      device_id: number
      timestamp: Date | null
      tx: bigint | null
      rx: bigint | null
    }, ExtArgs["result"]["traffic"]>
    composites: {}
  }

  type trafficGetPayload<S extends boolean | null | undefined | trafficDefaultArgs> = $Result.GetResult<Prisma.$trafficPayload, S>

  type trafficCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<trafficFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrafficCountAggregateInputType | true
    }

  export interface trafficDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['traffic'], meta: { name: 'traffic' } }
    /**
     * Find zero or one Traffic that matches the filter.
     * @param {trafficFindUniqueArgs} args - Arguments to find a Traffic
     * @example
     * // Get one Traffic
     * const traffic = await prisma.traffic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends trafficFindUniqueArgs>(args: SelectSubset<T, trafficFindUniqueArgs<ExtArgs>>): Prisma__trafficClient<$Result.GetResult<Prisma.$trafficPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Traffic that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {trafficFindUniqueOrThrowArgs} args - Arguments to find a Traffic
     * @example
     * // Get one Traffic
     * const traffic = await prisma.traffic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends trafficFindUniqueOrThrowArgs>(args: SelectSubset<T, trafficFindUniqueOrThrowArgs<ExtArgs>>): Prisma__trafficClient<$Result.GetResult<Prisma.$trafficPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Traffic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trafficFindFirstArgs} args - Arguments to find a Traffic
     * @example
     * // Get one Traffic
     * const traffic = await prisma.traffic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends trafficFindFirstArgs>(args?: SelectSubset<T, trafficFindFirstArgs<ExtArgs>>): Prisma__trafficClient<$Result.GetResult<Prisma.$trafficPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Traffic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trafficFindFirstOrThrowArgs} args - Arguments to find a Traffic
     * @example
     * // Get one Traffic
     * const traffic = await prisma.traffic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends trafficFindFirstOrThrowArgs>(args?: SelectSubset<T, trafficFindFirstOrThrowArgs<ExtArgs>>): Prisma__trafficClient<$Result.GetResult<Prisma.$trafficPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Traffic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trafficFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Traffic
     * const traffic = await prisma.traffic.findMany()
     * 
     * // Get first 10 Traffic
     * const traffic = await prisma.traffic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trafficWithIdOnly = await prisma.traffic.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends trafficFindManyArgs>(args?: SelectSubset<T, trafficFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trafficPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Traffic.
     * @param {trafficCreateArgs} args - Arguments to create a Traffic.
     * @example
     * // Create one Traffic
     * const Traffic = await prisma.traffic.create({
     *   data: {
     *     // ... data to create a Traffic
     *   }
     * })
     * 
     */
    create<T extends trafficCreateArgs>(args: SelectSubset<T, trafficCreateArgs<ExtArgs>>): Prisma__trafficClient<$Result.GetResult<Prisma.$trafficPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Traffic.
     * @param {trafficCreateManyArgs} args - Arguments to create many Traffic.
     * @example
     * // Create many Traffic
     * const traffic = await prisma.traffic.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends trafficCreateManyArgs>(args?: SelectSubset<T, trafficCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Traffic.
     * @param {trafficDeleteArgs} args - Arguments to delete one Traffic.
     * @example
     * // Delete one Traffic
     * const Traffic = await prisma.traffic.delete({
     *   where: {
     *     // ... filter to delete one Traffic
     *   }
     * })
     * 
     */
    delete<T extends trafficDeleteArgs>(args: SelectSubset<T, trafficDeleteArgs<ExtArgs>>): Prisma__trafficClient<$Result.GetResult<Prisma.$trafficPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Traffic.
     * @param {trafficUpdateArgs} args - Arguments to update one Traffic.
     * @example
     * // Update one Traffic
     * const traffic = await prisma.traffic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends trafficUpdateArgs>(args: SelectSubset<T, trafficUpdateArgs<ExtArgs>>): Prisma__trafficClient<$Result.GetResult<Prisma.$trafficPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Traffic.
     * @param {trafficDeleteManyArgs} args - Arguments to filter Traffic to delete.
     * @example
     * // Delete a few Traffic
     * const { count } = await prisma.traffic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends trafficDeleteManyArgs>(args?: SelectSubset<T, trafficDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Traffic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trafficUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Traffic
     * const traffic = await prisma.traffic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends trafficUpdateManyArgs>(args: SelectSubset<T, trafficUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Traffic.
     * @param {trafficUpsertArgs} args - Arguments to update or create a Traffic.
     * @example
     * // Update or create a Traffic
     * const traffic = await prisma.traffic.upsert({
     *   create: {
     *     // ... data to create a Traffic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Traffic we want to update
     *   }
     * })
     */
    upsert<T extends trafficUpsertArgs>(args: SelectSubset<T, trafficUpsertArgs<ExtArgs>>): Prisma__trafficClient<$Result.GetResult<Prisma.$trafficPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Traffic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trafficCountArgs} args - Arguments to filter Traffic to count.
     * @example
     * // Count the number of Traffic
     * const count = await prisma.traffic.count({
     *   where: {
     *     // ... the filter for the Traffic we want to count
     *   }
     * })
    **/
    count<T extends trafficCountArgs>(
      args?: Subset<T, trafficCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrafficCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Traffic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrafficAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrafficAggregateArgs>(args: Subset<T, TrafficAggregateArgs>): Prisma.PrismaPromise<GetTrafficAggregateType<T>>

    /**
     * Group by Traffic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trafficGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends trafficGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: trafficGroupByArgs['orderBy'] }
        : { orderBy?: trafficGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, trafficGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrafficGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the traffic model
   */
  readonly fields: trafficFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for traffic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__trafficClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    devices<T extends devicesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, devicesDefaultArgs<ExtArgs>>): Prisma__devicesClient<$Result.GetResult<Prisma.$devicesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the traffic model
   */
  interface trafficFieldRefs {
    readonly id: FieldRef<"traffic", 'Int'>
    readonly device_id: FieldRef<"traffic", 'Int'>
    readonly timestamp: FieldRef<"traffic", 'DateTime'>
    readonly tx: FieldRef<"traffic", 'BigInt'>
    readonly rx: FieldRef<"traffic", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * traffic findUnique
   */
  export type trafficFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traffic
     */
    select?: trafficSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traffic
     */
    omit?: trafficOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trafficInclude<ExtArgs> | null
    /**
     * Filter, which traffic to fetch.
     */
    where: trafficWhereUniqueInput
  }

  /**
   * traffic findUniqueOrThrow
   */
  export type trafficFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traffic
     */
    select?: trafficSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traffic
     */
    omit?: trafficOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trafficInclude<ExtArgs> | null
    /**
     * Filter, which traffic to fetch.
     */
    where: trafficWhereUniqueInput
  }

  /**
   * traffic findFirst
   */
  export type trafficFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traffic
     */
    select?: trafficSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traffic
     */
    omit?: trafficOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trafficInclude<ExtArgs> | null
    /**
     * Filter, which traffic to fetch.
     */
    where?: trafficWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of traffic to fetch.
     */
    orderBy?: trafficOrderByWithRelationInput | trafficOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for traffic.
     */
    cursor?: trafficWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` traffic from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` traffic.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of traffic.
     */
    distinct?: TrafficScalarFieldEnum | TrafficScalarFieldEnum[]
  }

  /**
   * traffic findFirstOrThrow
   */
  export type trafficFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traffic
     */
    select?: trafficSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traffic
     */
    omit?: trafficOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trafficInclude<ExtArgs> | null
    /**
     * Filter, which traffic to fetch.
     */
    where?: trafficWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of traffic to fetch.
     */
    orderBy?: trafficOrderByWithRelationInput | trafficOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for traffic.
     */
    cursor?: trafficWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` traffic from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` traffic.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of traffic.
     */
    distinct?: TrafficScalarFieldEnum | TrafficScalarFieldEnum[]
  }

  /**
   * traffic findMany
   */
  export type trafficFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traffic
     */
    select?: trafficSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traffic
     */
    omit?: trafficOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trafficInclude<ExtArgs> | null
    /**
     * Filter, which traffic to fetch.
     */
    where?: trafficWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of traffic to fetch.
     */
    orderBy?: trafficOrderByWithRelationInput | trafficOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing traffic.
     */
    cursor?: trafficWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` traffic from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` traffic.
     */
    skip?: number
    distinct?: TrafficScalarFieldEnum | TrafficScalarFieldEnum[]
  }

  /**
   * traffic create
   */
  export type trafficCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traffic
     */
    select?: trafficSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traffic
     */
    omit?: trafficOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trafficInclude<ExtArgs> | null
    /**
     * The data needed to create a traffic.
     */
    data: XOR<trafficCreateInput, trafficUncheckedCreateInput>
  }

  /**
   * traffic createMany
   */
  export type trafficCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many traffic.
     */
    data: trafficCreateManyInput | trafficCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * traffic update
   */
  export type trafficUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traffic
     */
    select?: trafficSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traffic
     */
    omit?: trafficOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trafficInclude<ExtArgs> | null
    /**
     * The data needed to update a traffic.
     */
    data: XOR<trafficUpdateInput, trafficUncheckedUpdateInput>
    /**
     * Choose, which traffic to update.
     */
    where: trafficWhereUniqueInput
  }

  /**
   * traffic updateMany
   */
  export type trafficUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update traffic.
     */
    data: XOR<trafficUpdateManyMutationInput, trafficUncheckedUpdateManyInput>
    /**
     * Filter which traffic to update
     */
    where?: trafficWhereInput
    /**
     * Limit how many traffic to update.
     */
    limit?: number
  }

  /**
   * traffic upsert
   */
  export type trafficUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traffic
     */
    select?: trafficSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traffic
     */
    omit?: trafficOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trafficInclude<ExtArgs> | null
    /**
     * The filter to search for the traffic to update in case it exists.
     */
    where: trafficWhereUniqueInput
    /**
     * In case the traffic found by the `where` argument doesn't exist, create a new traffic with this data.
     */
    create: XOR<trafficCreateInput, trafficUncheckedCreateInput>
    /**
     * In case the traffic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<trafficUpdateInput, trafficUncheckedUpdateInput>
  }

  /**
   * traffic delete
   */
  export type trafficDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traffic
     */
    select?: trafficSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traffic
     */
    omit?: trafficOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trafficInclude<ExtArgs> | null
    /**
     * Filter which traffic to delete.
     */
    where: trafficWhereUniqueInput
  }

  /**
   * traffic deleteMany
   */
  export type trafficDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which traffic to delete
     */
    where?: trafficWhereInput
    /**
     * Limit how many traffic to delete.
     */
    limit?: number
  }

  /**
   * traffic without action
   */
  export type trafficDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traffic
     */
    select?: trafficSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traffic
     */
    omit?: trafficOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trafficInclude<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    user_id: number | null
  }

  export type UsersSumAggregateOutputType = {
    user_id: number | null
  }

  export type UsersMinAggregateOutputType = {
    user_id: number | null
    username: string | null
  }

  export type UsersMaxAggregateOutputType = {
    user_id: number | null
    username: string | null
  }

  export type UsersCountAggregateOutputType = {
    user_id: number
    username: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    user_id?: true
  }

  export type UsersSumAggregateInputType = {
    user_id?: true
  }

  export type UsersMinAggregateInputType = {
    user_id?: true
    username?: true
  }

  export type UsersMaxAggregateInputType = {
    user_id?: true
    username?: true
  }

  export type UsersCountAggregateInputType = {
    user_id?: true
    username?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    user_id: number
    username: string
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    username?: boolean
    aggregated_bandwidth_logs_30min?: boolean | users$aggregated_bandwidth_logs_30minArgs<ExtArgs>
    aggregated_bandwidth_logs_3hr?: boolean | users$aggregated_bandwidth_logs_3hrArgs<ExtArgs>
    raw_bandwidth_logs?: boolean | users$raw_bandwidth_logsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>



  export type usersSelectScalar = {
    user_id?: boolean
    username?: boolean
  }

  export type usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"user_id" | "username", ExtArgs["result"]["users"]>
  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    aggregated_bandwidth_logs_30min?: boolean | users$aggregated_bandwidth_logs_30minArgs<ExtArgs>
    aggregated_bandwidth_logs_3hr?: boolean | users$aggregated_bandwidth_logs_3hrArgs<ExtArgs>
    raw_bandwidth_logs?: boolean | users$raw_bandwidth_logsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      aggregated_bandwidth_logs_30min: Prisma.$aggregated_bandwidth_logs_30minPayload<ExtArgs>[]
      aggregated_bandwidth_logs_3hr: Prisma.$aggregated_bandwidth_logs_3hrPayload<ExtArgs>[]
      raw_bandwidth_logs: Prisma.$raw_bandwidth_logsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      username: string
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const usersWithUser_idOnly = await prisma.users.findMany({ select: { user_id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    aggregated_bandwidth_logs_30min<T extends users$aggregated_bandwidth_logs_30minArgs<ExtArgs> = {}>(args?: Subset<T, users$aggregated_bandwidth_logs_30minArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_30minPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    aggregated_bandwidth_logs_3hr<T extends users$aggregated_bandwidth_logs_3hrArgs<ExtArgs> = {}>(args?: Subset<T, users$aggregated_bandwidth_logs_3hrArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$aggregated_bandwidth_logs_3hrPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    raw_bandwidth_logs<T extends users$raw_bandwidth_logsArgs<ExtArgs> = {}>(args?: Subset<T, users$raw_bandwidth_logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$raw_bandwidth_logsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */
  interface usersFieldRefs {
    readonly user_id: FieldRef<"users", 'Int'>
    readonly username: FieldRef<"users", 'String'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * users.aggregated_bandwidth_logs_30min
   */
  export type users$aggregated_bandwidth_logs_30minArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_30min
     */
    select?: aggregated_bandwidth_logs_30minSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_30min
     */
    omit?: aggregated_bandwidth_logs_30minOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_30minInclude<ExtArgs> | null
    where?: aggregated_bandwidth_logs_30minWhereInput
    orderBy?: aggregated_bandwidth_logs_30minOrderByWithRelationInput | aggregated_bandwidth_logs_30minOrderByWithRelationInput[]
    cursor?: aggregated_bandwidth_logs_30minWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Aggregated_bandwidth_logs_30minScalarFieldEnum | Aggregated_bandwidth_logs_30minScalarFieldEnum[]
  }

  /**
   * users.aggregated_bandwidth_logs_3hr
   */
  export type users$aggregated_bandwidth_logs_3hrArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aggregated_bandwidth_logs_3hr
     */
    select?: aggregated_bandwidth_logs_3hrSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aggregated_bandwidth_logs_3hr
     */
    omit?: aggregated_bandwidth_logs_3hrOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: aggregated_bandwidth_logs_3hrInclude<ExtArgs> | null
    where?: aggregated_bandwidth_logs_3hrWhereInput
    orderBy?: aggregated_bandwidth_logs_3hrOrderByWithRelationInput | aggregated_bandwidth_logs_3hrOrderByWithRelationInput[]
    cursor?: aggregated_bandwidth_logs_3hrWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Aggregated_bandwidth_logs_3hrScalarFieldEnum | Aggregated_bandwidth_logs_3hrScalarFieldEnum[]
  }

  /**
   * users.raw_bandwidth_logs
   */
  export type users$raw_bandwidth_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_bandwidth_logs
     */
    select?: raw_bandwidth_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_bandwidth_logs
     */
    omit?: raw_bandwidth_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_bandwidth_logsInclude<ExtArgs> | null
    where?: raw_bandwidth_logsWhereInput
    orderBy?: raw_bandwidth_logsOrderByWithRelationInput | raw_bandwidth_logsOrderByWithRelationInput[]
    cursor?: raw_bandwidth_logsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Raw_bandwidth_logsScalarFieldEnum | Raw_bandwidth_logsScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Aggregated_bandwidth_logs_30minScalarFieldEnum: {
    agg_id: 'agg_id',
    user_id: 'user_id',
    interval_start: 'interval_start',
    interval_end: 'interval_end',
    total_tx_bytes: 'total_tx_bytes',
    total_rx_bytes: 'total_rx_bytes'
  };

  export type Aggregated_bandwidth_logs_30minScalarFieldEnum = (typeof Aggregated_bandwidth_logs_30minScalarFieldEnum)[keyof typeof Aggregated_bandwidth_logs_30minScalarFieldEnum]


  export const Aggregated_bandwidth_logs_3hrScalarFieldEnum: {
    agg_id: 'agg_id',
    user_id: 'user_id',
    interval_start: 'interval_start',
    interval_end: 'interval_end',
    total_tx_bytes: 'total_tx_bytes',
    total_rx_bytes: 'total_rx_bytes'
  };

  export type Aggregated_bandwidth_logs_3hrScalarFieldEnum = (typeof Aggregated_bandwidth_logs_3hrScalarFieldEnum)[keyof typeof Aggregated_bandwidth_logs_3hrScalarFieldEnum]


  export const DevicesScalarFieldEnum: {
    id: 'id',
    sn: 'sn',
    comment: 'comment',
    last_check: 'last_check',
    last_tx: 'last_tx',
    last_rx: 'last_rx'
  };

  export type DevicesScalarFieldEnum = (typeof DevicesScalarFieldEnum)[keyof typeof DevicesScalarFieldEnum]


  export const Raw_bandwidth_logsScalarFieldEnum: {
    log_id: 'log_id',
    user_id: 'user_id',
    source_ip: 'source_ip',
    destination_ip: 'destination_ip',
    tx_bytes: 'tx_bytes',
    rx_bytes: 'rx_bytes',
    timestamp: 'timestamp'
  };

  export type Raw_bandwidth_logsScalarFieldEnum = (typeof Raw_bandwidth_logsScalarFieldEnum)[keyof typeof Raw_bandwidth_logsScalarFieldEnum]


  export const TrafficScalarFieldEnum: {
    id: 'id',
    device_id: 'device_id',
    timestamp: 'timestamp',
    tx: 'tx',
    rx: 'rx'
  };

  export type TrafficScalarFieldEnum = (typeof TrafficScalarFieldEnum)[keyof typeof TrafficScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    user_id: 'user_id',
    username: 'username'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const devicesOrderByRelevanceFieldEnum: {
    sn: 'sn',
    comment: 'comment'
  };

  export type devicesOrderByRelevanceFieldEnum = (typeof devicesOrderByRelevanceFieldEnum)[keyof typeof devicesOrderByRelevanceFieldEnum]


  export const raw_bandwidth_logsOrderByRelevanceFieldEnum: {
    source_ip: 'source_ip',
    destination_ip: 'destination_ip'
  };

  export type raw_bandwidth_logsOrderByRelevanceFieldEnum = (typeof raw_bandwidth_logsOrderByRelevanceFieldEnum)[keyof typeof raw_bandwidth_logsOrderByRelevanceFieldEnum]


  export const usersOrderByRelevanceFieldEnum: {
    username: 'username'
  };

  export type usersOrderByRelevanceFieldEnum = (typeof usersOrderByRelevanceFieldEnum)[keyof typeof usersOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type aggregated_bandwidth_logs_30minWhereInput = {
    AND?: aggregated_bandwidth_logs_30minWhereInput | aggregated_bandwidth_logs_30minWhereInput[]
    OR?: aggregated_bandwidth_logs_30minWhereInput[]
    NOT?: aggregated_bandwidth_logs_30minWhereInput | aggregated_bandwidth_logs_30minWhereInput[]
    agg_id?: BigIntFilter<"aggregated_bandwidth_logs_30min"> | bigint | number
    user_id?: IntFilter<"aggregated_bandwidth_logs_30min"> | number
    interval_start?: DateTimeFilter<"aggregated_bandwidth_logs_30min"> | Date | string
    interval_end?: DateTimeFilter<"aggregated_bandwidth_logs_30min"> | Date | string
    total_tx_bytes?: BigIntFilter<"aggregated_bandwidth_logs_30min"> | bigint | number
    total_rx_bytes?: BigIntFilter<"aggregated_bandwidth_logs_30min"> | bigint | number
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type aggregated_bandwidth_logs_30minOrderByWithRelationInput = {
    agg_id?: SortOrder
    user_id?: SortOrder
    interval_start?: SortOrder
    interval_end?: SortOrder
    total_tx_bytes?: SortOrder
    total_rx_bytes?: SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type aggregated_bandwidth_logs_30minWhereUniqueInput = Prisma.AtLeast<{
    agg_id?: bigint | number
    AND?: aggregated_bandwidth_logs_30minWhereInput | aggregated_bandwidth_logs_30minWhereInput[]
    OR?: aggregated_bandwidth_logs_30minWhereInput[]
    NOT?: aggregated_bandwidth_logs_30minWhereInput | aggregated_bandwidth_logs_30minWhereInput[]
    user_id?: IntFilter<"aggregated_bandwidth_logs_30min"> | number
    interval_start?: DateTimeFilter<"aggregated_bandwidth_logs_30min"> | Date | string
    interval_end?: DateTimeFilter<"aggregated_bandwidth_logs_30min"> | Date | string
    total_tx_bytes?: BigIntFilter<"aggregated_bandwidth_logs_30min"> | bigint | number
    total_rx_bytes?: BigIntFilter<"aggregated_bandwidth_logs_30min"> | bigint | number
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "agg_id">

  export type aggregated_bandwidth_logs_30minOrderByWithAggregationInput = {
    agg_id?: SortOrder
    user_id?: SortOrder
    interval_start?: SortOrder
    interval_end?: SortOrder
    total_tx_bytes?: SortOrder
    total_rx_bytes?: SortOrder
    _count?: aggregated_bandwidth_logs_30minCountOrderByAggregateInput
    _avg?: aggregated_bandwidth_logs_30minAvgOrderByAggregateInput
    _max?: aggregated_bandwidth_logs_30minMaxOrderByAggregateInput
    _min?: aggregated_bandwidth_logs_30minMinOrderByAggregateInput
    _sum?: aggregated_bandwidth_logs_30minSumOrderByAggregateInput
  }

  export type aggregated_bandwidth_logs_30minScalarWhereWithAggregatesInput = {
    AND?: aggregated_bandwidth_logs_30minScalarWhereWithAggregatesInput | aggregated_bandwidth_logs_30minScalarWhereWithAggregatesInput[]
    OR?: aggregated_bandwidth_logs_30minScalarWhereWithAggregatesInput[]
    NOT?: aggregated_bandwidth_logs_30minScalarWhereWithAggregatesInput | aggregated_bandwidth_logs_30minScalarWhereWithAggregatesInput[]
    agg_id?: BigIntWithAggregatesFilter<"aggregated_bandwidth_logs_30min"> | bigint | number
    user_id?: IntWithAggregatesFilter<"aggregated_bandwidth_logs_30min"> | number
    interval_start?: DateTimeWithAggregatesFilter<"aggregated_bandwidth_logs_30min"> | Date | string
    interval_end?: DateTimeWithAggregatesFilter<"aggregated_bandwidth_logs_30min"> | Date | string
    total_tx_bytes?: BigIntWithAggregatesFilter<"aggregated_bandwidth_logs_30min"> | bigint | number
    total_rx_bytes?: BigIntWithAggregatesFilter<"aggregated_bandwidth_logs_30min"> | bigint | number
  }

  export type aggregated_bandwidth_logs_3hrWhereInput = {
    AND?: aggregated_bandwidth_logs_3hrWhereInput | aggregated_bandwidth_logs_3hrWhereInput[]
    OR?: aggregated_bandwidth_logs_3hrWhereInput[]
    NOT?: aggregated_bandwidth_logs_3hrWhereInput | aggregated_bandwidth_logs_3hrWhereInput[]
    agg_id?: BigIntFilter<"aggregated_bandwidth_logs_3hr"> | bigint | number
    user_id?: IntFilter<"aggregated_bandwidth_logs_3hr"> | number
    interval_start?: DateTimeFilter<"aggregated_bandwidth_logs_3hr"> | Date | string
    interval_end?: DateTimeFilter<"aggregated_bandwidth_logs_3hr"> | Date | string
    total_tx_bytes?: BigIntFilter<"aggregated_bandwidth_logs_3hr"> | bigint | number
    total_rx_bytes?: BigIntFilter<"aggregated_bandwidth_logs_3hr"> | bigint | number
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type aggregated_bandwidth_logs_3hrOrderByWithRelationInput = {
    agg_id?: SortOrder
    user_id?: SortOrder
    interval_start?: SortOrder
    interval_end?: SortOrder
    total_tx_bytes?: SortOrder
    total_rx_bytes?: SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type aggregated_bandwidth_logs_3hrWhereUniqueInput = Prisma.AtLeast<{
    agg_id?: bigint | number
    AND?: aggregated_bandwidth_logs_3hrWhereInput | aggregated_bandwidth_logs_3hrWhereInput[]
    OR?: aggregated_bandwidth_logs_3hrWhereInput[]
    NOT?: aggregated_bandwidth_logs_3hrWhereInput | aggregated_bandwidth_logs_3hrWhereInput[]
    user_id?: IntFilter<"aggregated_bandwidth_logs_3hr"> | number
    interval_start?: DateTimeFilter<"aggregated_bandwidth_logs_3hr"> | Date | string
    interval_end?: DateTimeFilter<"aggregated_bandwidth_logs_3hr"> | Date | string
    total_tx_bytes?: BigIntFilter<"aggregated_bandwidth_logs_3hr"> | bigint | number
    total_rx_bytes?: BigIntFilter<"aggregated_bandwidth_logs_3hr"> | bigint | number
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "agg_id">

  export type aggregated_bandwidth_logs_3hrOrderByWithAggregationInput = {
    agg_id?: SortOrder
    user_id?: SortOrder
    interval_start?: SortOrder
    interval_end?: SortOrder
    total_tx_bytes?: SortOrder
    total_rx_bytes?: SortOrder
    _count?: aggregated_bandwidth_logs_3hrCountOrderByAggregateInput
    _avg?: aggregated_bandwidth_logs_3hrAvgOrderByAggregateInput
    _max?: aggregated_bandwidth_logs_3hrMaxOrderByAggregateInput
    _min?: aggregated_bandwidth_logs_3hrMinOrderByAggregateInput
    _sum?: aggregated_bandwidth_logs_3hrSumOrderByAggregateInput
  }

  export type aggregated_bandwidth_logs_3hrScalarWhereWithAggregatesInput = {
    AND?: aggregated_bandwidth_logs_3hrScalarWhereWithAggregatesInput | aggregated_bandwidth_logs_3hrScalarWhereWithAggregatesInput[]
    OR?: aggregated_bandwidth_logs_3hrScalarWhereWithAggregatesInput[]
    NOT?: aggregated_bandwidth_logs_3hrScalarWhereWithAggregatesInput | aggregated_bandwidth_logs_3hrScalarWhereWithAggregatesInput[]
    agg_id?: BigIntWithAggregatesFilter<"aggregated_bandwidth_logs_3hr"> | bigint | number
    user_id?: IntWithAggregatesFilter<"aggregated_bandwidth_logs_3hr"> | number
    interval_start?: DateTimeWithAggregatesFilter<"aggregated_bandwidth_logs_3hr"> | Date | string
    interval_end?: DateTimeWithAggregatesFilter<"aggregated_bandwidth_logs_3hr"> | Date | string
    total_tx_bytes?: BigIntWithAggregatesFilter<"aggregated_bandwidth_logs_3hr"> | bigint | number
    total_rx_bytes?: BigIntWithAggregatesFilter<"aggregated_bandwidth_logs_3hr"> | bigint | number
  }

  export type devicesWhereInput = {
    AND?: devicesWhereInput | devicesWhereInput[]
    OR?: devicesWhereInput[]
    NOT?: devicesWhereInput | devicesWhereInput[]
    id?: IntFilter<"devices"> | number
    sn?: StringFilter<"devices"> | string
    comment?: StringNullableFilter<"devices"> | string | null
    last_check?: DateTimeNullableFilter<"devices"> | Date | string | null
    last_tx?: BigIntNullableFilter<"devices"> | bigint | number | null
    last_rx?: BigIntNullableFilter<"devices"> | bigint | number | null
    traffic?: TrafficListRelationFilter
  }

  export type devicesOrderByWithRelationInput = {
    id?: SortOrder
    sn?: SortOrder
    comment?: SortOrderInput | SortOrder
    last_check?: SortOrderInput | SortOrder
    last_tx?: SortOrderInput | SortOrder
    last_rx?: SortOrderInput | SortOrder
    traffic?: trafficOrderByRelationAggregateInput
    _relevance?: devicesOrderByRelevanceInput
  }

  export type devicesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: devicesWhereInput | devicesWhereInput[]
    OR?: devicesWhereInput[]
    NOT?: devicesWhereInput | devicesWhereInput[]
    sn?: StringFilter<"devices"> | string
    comment?: StringNullableFilter<"devices"> | string | null
    last_check?: DateTimeNullableFilter<"devices"> | Date | string | null
    last_tx?: BigIntNullableFilter<"devices"> | bigint | number | null
    last_rx?: BigIntNullableFilter<"devices"> | bigint | number | null
    traffic?: TrafficListRelationFilter
  }, "id">

  export type devicesOrderByWithAggregationInput = {
    id?: SortOrder
    sn?: SortOrder
    comment?: SortOrderInput | SortOrder
    last_check?: SortOrderInput | SortOrder
    last_tx?: SortOrderInput | SortOrder
    last_rx?: SortOrderInput | SortOrder
    _count?: devicesCountOrderByAggregateInput
    _avg?: devicesAvgOrderByAggregateInput
    _max?: devicesMaxOrderByAggregateInput
    _min?: devicesMinOrderByAggregateInput
    _sum?: devicesSumOrderByAggregateInput
  }

  export type devicesScalarWhereWithAggregatesInput = {
    AND?: devicesScalarWhereWithAggregatesInput | devicesScalarWhereWithAggregatesInput[]
    OR?: devicesScalarWhereWithAggregatesInput[]
    NOT?: devicesScalarWhereWithAggregatesInput | devicesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"devices"> | number
    sn?: StringWithAggregatesFilter<"devices"> | string
    comment?: StringNullableWithAggregatesFilter<"devices"> | string | null
    last_check?: DateTimeNullableWithAggregatesFilter<"devices"> | Date | string | null
    last_tx?: BigIntNullableWithAggregatesFilter<"devices"> | bigint | number | null
    last_rx?: BigIntNullableWithAggregatesFilter<"devices"> | bigint | number | null
  }

  export type raw_bandwidth_logsWhereInput = {
    AND?: raw_bandwidth_logsWhereInput | raw_bandwidth_logsWhereInput[]
    OR?: raw_bandwidth_logsWhereInput[]
    NOT?: raw_bandwidth_logsWhereInput | raw_bandwidth_logsWhereInput[]
    log_id?: BigIntFilter<"raw_bandwidth_logs"> | bigint | number
    user_id?: IntFilter<"raw_bandwidth_logs"> | number
    source_ip?: StringNullableFilter<"raw_bandwidth_logs"> | string | null
    destination_ip?: StringNullableFilter<"raw_bandwidth_logs"> | string | null
    tx_bytes?: BigIntFilter<"raw_bandwidth_logs"> | bigint | number
    rx_bytes?: BigIntFilter<"raw_bandwidth_logs"> | bigint | number
    timestamp?: DateTimeFilter<"raw_bandwidth_logs"> | Date | string
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type raw_bandwidth_logsOrderByWithRelationInput = {
    log_id?: SortOrder
    user_id?: SortOrder
    source_ip?: SortOrderInput | SortOrder
    destination_ip?: SortOrderInput | SortOrder
    tx_bytes?: SortOrder
    rx_bytes?: SortOrder
    timestamp?: SortOrder
    users?: usersOrderByWithRelationInput
    _relevance?: raw_bandwidth_logsOrderByRelevanceInput
  }

  export type raw_bandwidth_logsWhereUniqueInput = Prisma.AtLeast<{
    log_id?: bigint | number
    AND?: raw_bandwidth_logsWhereInput | raw_bandwidth_logsWhereInput[]
    OR?: raw_bandwidth_logsWhereInput[]
    NOT?: raw_bandwidth_logsWhereInput | raw_bandwidth_logsWhereInput[]
    user_id?: IntFilter<"raw_bandwidth_logs"> | number
    source_ip?: StringNullableFilter<"raw_bandwidth_logs"> | string | null
    destination_ip?: StringNullableFilter<"raw_bandwidth_logs"> | string | null
    tx_bytes?: BigIntFilter<"raw_bandwidth_logs"> | bigint | number
    rx_bytes?: BigIntFilter<"raw_bandwidth_logs"> | bigint | number
    timestamp?: DateTimeFilter<"raw_bandwidth_logs"> | Date | string
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "log_id">

  export type raw_bandwidth_logsOrderByWithAggregationInput = {
    log_id?: SortOrder
    user_id?: SortOrder
    source_ip?: SortOrderInput | SortOrder
    destination_ip?: SortOrderInput | SortOrder
    tx_bytes?: SortOrder
    rx_bytes?: SortOrder
    timestamp?: SortOrder
    _count?: raw_bandwidth_logsCountOrderByAggregateInput
    _avg?: raw_bandwidth_logsAvgOrderByAggregateInput
    _max?: raw_bandwidth_logsMaxOrderByAggregateInput
    _min?: raw_bandwidth_logsMinOrderByAggregateInput
    _sum?: raw_bandwidth_logsSumOrderByAggregateInput
  }

  export type raw_bandwidth_logsScalarWhereWithAggregatesInput = {
    AND?: raw_bandwidth_logsScalarWhereWithAggregatesInput | raw_bandwidth_logsScalarWhereWithAggregatesInput[]
    OR?: raw_bandwidth_logsScalarWhereWithAggregatesInput[]
    NOT?: raw_bandwidth_logsScalarWhereWithAggregatesInput | raw_bandwidth_logsScalarWhereWithAggregatesInput[]
    log_id?: BigIntWithAggregatesFilter<"raw_bandwidth_logs"> | bigint | number
    user_id?: IntWithAggregatesFilter<"raw_bandwidth_logs"> | number
    source_ip?: StringNullableWithAggregatesFilter<"raw_bandwidth_logs"> | string | null
    destination_ip?: StringNullableWithAggregatesFilter<"raw_bandwidth_logs"> | string | null
    tx_bytes?: BigIntWithAggregatesFilter<"raw_bandwidth_logs"> | bigint | number
    rx_bytes?: BigIntWithAggregatesFilter<"raw_bandwidth_logs"> | bigint | number
    timestamp?: DateTimeWithAggregatesFilter<"raw_bandwidth_logs"> | Date | string
  }

  export type trafficWhereInput = {
    AND?: trafficWhereInput | trafficWhereInput[]
    OR?: trafficWhereInput[]
    NOT?: trafficWhereInput | trafficWhereInput[]
    id?: IntFilter<"traffic"> | number
    device_id?: IntFilter<"traffic"> | number
    timestamp?: DateTimeNullableFilter<"traffic"> | Date | string | null
    tx?: BigIntNullableFilter<"traffic"> | bigint | number | null
    rx?: BigIntNullableFilter<"traffic"> | bigint | number | null
    devices?: XOR<DevicesScalarRelationFilter, devicesWhereInput>
  }

  export type trafficOrderByWithRelationInput = {
    id?: SortOrder
    device_id?: SortOrder
    timestamp?: SortOrderInput | SortOrder
    tx?: SortOrderInput | SortOrder
    rx?: SortOrderInput | SortOrder
    devices?: devicesOrderByWithRelationInput
  }

  export type trafficWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: trafficWhereInput | trafficWhereInput[]
    OR?: trafficWhereInput[]
    NOT?: trafficWhereInput | trafficWhereInput[]
    device_id?: IntFilter<"traffic"> | number
    timestamp?: DateTimeNullableFilter<"traffic"> | Date | string | null
    tx?: BigIntNullableFilter<"traffic"> | bigint | number | null
    rx?: BigIntNullableFilter<"traffic"> | bigint | number | null
    devices?: XOR<DevicesScalarRelationFilter, devicesWhereInput>
  }, "id">

  export type trafficOrderByWithAggregationInput = {
    id?: SortOrder
    device_id?: SortOrder
    timestamp?: SortOrderInput | SortOrder
    tx?: SortOrderInput | SortOrder
    rx?: SortOrderInput | SortOrder
    _count?: trafficCountOrderByAggregateInput
    _avg?: trafficAvgOrderByAggregateInput
    _max?: trafficMaxOrderByAggregateInput
    _min?: trafficMinOrderByAggregateInput
    _sum?: trafficSumOrderByAggregateInput
  }

  export type trafficScalarWhereWithAggregatesInput = {
    AND?: trafficScalarWhereWithAggregatesInput | trafficScalarWhereWithAggregatesInput[]
    OR?: trafficScalarWhereWithAggregatesInput[]
    NOT?: trafficScalarWhereWithAggregatesInput | trafficScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"traffic"> | number
    device_id?: IntWithAggregatesFilter<"traffic"> | number
    timestamp?: DateTimeNullableWithAggregatesFilter<"traffic"> | Date | string | null
    tx?: BigIntNullableWithAggregatesFilter<"traffic"> | bigint | number | null
    rx?: BigIntNullableWithAggregatesFilter<"traffic"> | bigint | number | null
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    user_id?: IntFilter<"users"> | number
    username?: StringFilter<"users"> | string
    aggregated_bandwidth_logs_30min?: Aggregated_bandwidth_logs_30minListRelationFilter
    aggregated_bandwidth_logs_3hr?: Aggregated_bandwidth_logs_3hrListRelationFilter
    raw_bandwidth_logs?: Raw_bandwidth_logsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    user_id?: SortOrder
    username?: SortOrder
    aggregated_bandwidth_logs_30min?: aggregated_bandwidth_logs_30minOrderByRelationAggregateInput
    aggregated_bandwidth_logs_3hr?: aggregated_bandwidth_logs_3hrOrderByRelationAggregateInput
    raw_bandwidth_logs?: raw_bandwidth_logsOrderByRelationAggregateInput
    _relevance?: usersOrderByRelevanceInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    username?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    aggregated_bandwidth_logs_30min?: Aggregated_bandwidth_logs_30minListRelationFilter
    aggregated_bandwidth_logs_3hr?: Aggregated_bandwidth_logs_3hrListRelationFilter
    raw_bandwidth_logs?: Raw_bandwidth_logsListRelationFilter
  }, "user_id" | "username">

  export type usersOrderByWithAggregationInput = {
    user_id?: SortOrder
    username?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"users"> | number
    username?: StringWithAggregatesFilter<"users"> | string
  }

  export type aggregated_bandwidth_logs_30minCreateInput = {
    agg_id?: bigint | number
    interval_start: Date | string
    interval_end: Date | string
    total_tx_bytes: bigint | number
    total_rx_bytes: bigint | number
    users: usersCreateNestedOneWithoutAggregated_bandwidth_logs_30minInput
  }

  export type aggregated_bandwidth_logs_30minUncheckedCreateInput = {
    agg_id?: bigint | number
    user_id: number
    interval_start: Date | string
    interval_end: Date | string
    total_tx_bytes: bigint | number
    total_rx_bytes: bigint | number
  }

  export type aggregated_bandwidth_logs_30minUpdateInput = {
    agg_id?: BigIntFieldUpdateOperationsInput | bigint | number
    interval_start?: DateTimeFieldUpdateOperationsInput | Date | string
    interval_end?: DateTimeFieldUpdateOperationsInput | Date | string
    total_tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    total_rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    users?: usersUpdateOneRequiredWithoutAggregated_bandwidth_logs_30minNestedInput
  }

  export type aggregated_bandwidth_logs_30minUncheckedUpdateInput = {
    agg_id?: BigIntFieldUpdateOperationsInput | bigint | number
    user_id?: IntFieldUpdateOperationsInput | number
    interval_start?: DateTimeFieldUpdateOperationsInput | Date | string
    interval_end?: DateTimeFieldUpdateOperationsInput | Date | string
    total_tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    total_rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type aggregated_bandwidth_logs_30minCreateManyInput = {
    agg_id?: bigint | number
    user_id: number
    interval_start: Date | string
    interval_end: Date | string
    total_tx_bytes: bigint | number
    total_rx_bytes: bigint | number
  }

  export type aggregated_bandwidth_logs_30minUpdateManyMutationInput = {
    agg_id?: BigIntFieldUpdateOperationsInput | bigint | number
    interval_start?: DateTimeFieldUpdateOperationsInput | Date | string
    interval_end?: DateTimeFieldUpdateOperationsInput | Date | string
    total_tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    total_rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type aggregated_bandwidth_logs_30minUncheckedUpdateManyInput = {
    agg_id?: BigIntFieldUpdateOperationsInput | bigint | number
    user_id?: IntFieldUpdateOperationsInput | number
    interval_start?: DateTimeFieldUpdateOperationsInput | Date | string
    interval_end?: DateTimeFieldUpdateOperationsInput | Date | string
    total_tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    total_rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type aggregated_bandwidth_logs_3hrCreateInput = {
    agg_id?: bigint | number
    interval_start: Date | string
    interval_end: Date | string
    total_tx_bytes: bigint | number
    total_rx_bytes: bigint | number
    users: usersCreateNestedOneWithoutAggregated_bandwidth_logs_3hrInput
  }

  export type aggregated_bandwidth_logs_3hrUncheckedCreateInput = {
    agg_id?: bigint | number
    user_id: number
    interval_start: Date | string
    interval_end: Date | string
    total_tx_bytes: bigint | number
    total_rx_bytes: bigint | number
  }

  export type aggregated_bandwidth_logs_3hrUpdateInput = {
    agg_id?: BigIntFieldUpdateOperationsInput | bigint | number
    interval_start?: DateTimeFieldUpdateOperationsInput | Date | string
    interval_end?: DateTimeFieldUpdateOperationsInput | Date | string
    total_tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    total_rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    users?: usersUpdateOneRequiredWithoutAggregated_bandwidth_logs_3hrNestedInput
  }

  export type aggregated_bandwidth_logs_3hrUncheckedUpdateInput = {
    agg_id?: BigIntFieldUpdateOperationsInput | bigint | number
    user_id?: IntFieldUpdateOperationsInput | number
    interval_start?: DateTimeFieldUpdateOperationsInput | Date | string
    interval_end?: DateTimeFieldUpdateOperationsInput | Date | string
    total_tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    total_rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type aggregated_bandwidth_logs_3hrCreateManyInput = {
    agg_id?: bigint | number
    user_id: number
    interval_start: Date | string
    interval_end: Date | string
    total_tx_bytes: bigint | number
    total_rx_bytes: bigint | number
  }

  export type aggregated_bandwidth_logs_3hrUpdateManyMutationInput = {
    agg_id?: BigIntFieldUpdateOperationsInput | bigint | number
    interval_start?: DateTimeFieldUpdateOperationsInput | Date | string
    interval_end?: DateTimeFieldUpdateOperationsInput | Date | string
    total_tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    total_rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type aggregated_bandwidth_logs_3hrUncheckedUpdateManyInput = {
    agg_id?: BigIntFieldUpdateOperationsInput | bigint | number
    user_id?: IntFieldUpdateOperationsInput | number
    interval_start?: DateTimeFieldUpdateOperationsInput | Date | string
    interval_end?: DateTimeFieldUpdateOperationsInput | Date | string
    total_tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    total_rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type devicesCreateInput = {
    sn: string
    comment?: string | null
    last_check?: Date | string | null
    last_tx?: bigint | number | null
    last_rx?: bigint | number | null
    traffic?: trafficCreateNestedManyWithoutDevicesInput
  }

  export type devicesUncheckedCreateInput = {
    id?: number
    sn: string
    comment?: string | null
    last_check?: Date | string | null
    last_tx?: bigint | number | null
    last_rx?: bigint | number | null
    traffic?: trafficUncheckedCreateNestedManyWithoutDevicesInput
  }

  export type devicesUpdateInput = {
    sn?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    last_check?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_tx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    last_rx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    traffic?: trafficUpdateManyWithoutDevicesNestedInput
  }

  export type devicesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    last_check?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_tx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    last_rx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    traffic?: trafficUncheckedUpdateManyWithoutDevicesNestedInput
  }

  export type devicesCreateManyInput = {
    id?: number
    sn: string
    comment?: string | null
    last_check?: Date | string | null
    last_tx?: bigint | number | null
    last_rx?: bigint | number | null
  }

  export type devicesUpdateManyMutationInput = {
    sn?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    last_check?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_tx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    last_rx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type devicesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    last_check?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_tx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    last_rx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type raw_bandwidth_logsCreateInput = {
    log_id?: bigint | number
    source_ip?: string | null
    destination_ip?: string | null
    tx_bytes: bigint | number
    rx_bytes: bigint | number
    timestamp: Date | string
    users: usersCreateNestedOneWithoutRaw_bandwidth_logsInput
  }

  export type raw_bandwidth_logsUncheckedCreateInput = {
    log_id?: bigint | number
    user_id: number
    source_ip?: string | null
    destination_ip?: string | null
    tx_bytes: bigint | number
    rx_bytes: bigint | number
    timestamp: Date | string
  }

  export type raw_bandwidth_logsUpdateInput = {
    log_id?: BigIntFieldUpdateOperationsInput | bigint | number
    source_ip?: NullableStringFieldUpdateOperationsInput | string | null
    destination_ip?: NullableStringFieldUpdateOperationsInput | string | null
    tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutRaw_bandwidth_logsNestedInput
  }

  export type raw_bandwidth_logsUncheckedUpdateInput = {
    log_id?: BigIntFieldUpdateOperationsInput | bigint | number
    user_id?: IntFieldUpdateOperationsInput | number
    source_ip?: NullableStringFieldUpdateOperationsInput | string | null
    destination_ip?: NullableStringFieldUpdateOperationsInput | string | null
    tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type raw_bandwidth_logsCreateManyInput = {
    log_id?: bigint | number
    user_id: number
    source_ip?: string | null
    destination_ip?: string | null
    tx_bytes: bigint | number
    rx_bytes: bigint | number
    timestamp: Date | string
  }

  export type raw_bandwidth_logsUpdateManyMutationInput = {
    log_id?: BigIntFieldUpdateOperationsInput | bigint | number
    source_ip?: NullableStringFieldUpdateOperationsInput | string | null
    destination_ip?: NullableStringFieldUpdateOperationsInput | string | null
    tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type raw_bandwidth_logsUncheckedUpdateManyInput = {
    log_id?: BigIntFieldUpdateOperationsInput | bigint | number
    user_id?: IntFieldUpdateOperationsInput | number
    source_ip?: NullableStringFieldUpdateOperationsInput | string | null
    destination_ip?: NullableStringFieldUpdateOperationsInput | string | null
    tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type trafficCreateInput = {
    timestamp?: Date | string | null
    tx?: bigint | number | null
    rx?: bigint | number | null
    devices: devicesCreateNestedOneWithoutTrafficInput
  }

  export type trafficUncheckedCreateInput = {
    id?: number
    device_id: number
    timestamp?: Date | string | null
    tx?: bigint | number | null
    rx?: bigint | number | null
  }

  export type trafficUpdateInput = {
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    rx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    devices?: devicesUpdateOneRequiredWithoutTrafficNestedInput
  }

  export type trafficUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    device_id?: IntFieldUpdateOperationsInput | number
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    rx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type trafficCreateManyInput = {
    id?: number
    device_id: number
    timestamp?: Date | string | null
    tx?: bigint | number | null
    rx?: bigint | number | null
  }

  export type trafficUpdateManyMutationInput = {
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    rx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type trafficUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    device_id?: IntFieldUpdateOperationsInput | number
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    rx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type usersCreateInput = {
    username: string
    aggregated_bandwidth_logs_30min?: aggregated_bandwidth_logs_30minCreateNestedManyWithoutUsersInput
    aggregated_bandwidth_logs_3hr?: aggregated_bandwidth_logs_3hrCreateNestedManyWithoutUsersInput
    raw_bandwidth_logs?: raw_bandwidth_logsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    user_id?: number
    username: string
    aggregated_bandwidth_logs_30min?: aggregated_bandwidth_logs_30minUncheckedCreateNestedManyWithoutUsersInput
    aggregated_bandwidth_logs_3hr?: aggregated_bandwidth_logs_3hrUncheckedCreateNestedManyWithoutUsersInput
    raw_bandwidth_logs?: raw_bandwidth_logsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    aggregated_bandwidth_logs_30min?: aggregated_bandwidth_logs_30minUpdateManyWithoutUsersNestedInput
    aggregated_bandwidth_logs_3hr?: aggregated_bandwidth_logs_3hrUpdateManyWithoutUsersNestedInput
    raw_bandwidth_logs?: raw_bandwidth_logsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    aggregated_bandwidth_logs_30min?: aggregated_bandwidth_logs_30minUncheckedUpdateManyWithoutUsersNestedInput
    aggregated_bandwidth_logs_3hr?: aggregated_bandwidth_logs_3hrUncheckedUpdateManyWithoutUsersNestedInput
    raw_bandwidth_logs?: raw_bandwidth_logsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    user_id?: number
    username: string
  }

  export type usersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UsersScalarRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type aggregated_bandwidth_logs_30minCountOrderByAggregateInput = {
    agg_id?: SortOrder
    user_id?: SortOrder
    interval_start?: SortOrder
    interval_end?: SortOrder
    total_tx_bytes?: SortOrder
    total_rx_bytes?: SortOrder
  }

  export type aggregated_bandwidth_logs_30minAvgOrderByAggregateInput = {
    agg_id?: SortOrder
    user_id?: SortOrder
    total_tx_bytes?: SortOrder
    total_rx_bytes?: SortOrder
  }

  export type aggregated_bandwidth_logs_30minMaxOrderByAggregateInput = {
    agg_id?: SortOrder
    user_id?: SortOrder
    interval_start?: SortOrder
    interval_end?: SortOrder
    total_tx_bytes?: SortOrder
    total_rx_bytes?: SortOrder
  }

  export type aggregated_bandwidth_logs_30minMinOrderByAggregateInput = {
    agg_id?: SortOrder
    user_id?: SortOrder
    interval_start?: SortOrder
    interval_end?: SortOrder
    total_tx_bytes?: SortOrder
    total_rx_bytes?: SortOrder
  }

  export type aggregated_bandwidth_logs_30minSumOrderByAggregateInput = {
    agg_id?: SortOrder
    user_id?: SortOrder
    total_tx_bytes?: SortOrder
    total_rx_bytes?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type aggregated_bandwidth_logs_3hrCountOrderByAggregateInput = {
    agg_id?: SortOrder
    user_id?: SortOrder
    interval_start?: SortOrder
    interval_end?: SortOrder
    total_tx_bytes?: SortOrder
    total_rx_bytes?: SortOrder
  }

  export type aggregated_bandwidth_logs_3hrAvgOrderByAggregateInput = {
    agg_id?: SortOrder
    user_id?: SortOrder
    total_tx_bytes?: SortOrder
    total_rx_bytes?: SortOrder
  }

  export type aggregated_bandwidth_logs_3hrMaxOrderByAggregateInput = {
    agg_id?: SortOrder
    user_id?: SortOrder
    interval_start?: SortOrder
    interval_end?: SortOrder
    total_tx_bytes?: SortOrder
    total_rx_bytes?: SortOrder
  }

  export type aggregated_bandwidth_logs_3hrMinOrderByAggregateInput = {
    agg_id?: SortOrder
    user_id?: SortOrder
    interval_start?: SortOrder
    interval_end?: SortOrder
    total_tx_bytes?: SortOrder
    total_rx_bytes?: SortOrder
  }

  export type aggregated_bandwidth_logs_3hrSumOrderByAggregateInput = {
    agg_id?: SortOrder
    user_id?: SortOrder
    total_tx_bytes?: SortOrder
    total_rx_bytes?: SortOrder
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type TrafficListRelationFilter = {
    every?: trafficWhereInput
    some?: trafficWhereInput
    none?: trafficWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type trafficOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type devicesOrderByRelevanceInput = {
    fields: devicesOrderByRelevanceFieldEnum | devicesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type devicesCountOrderByAggregateInput = {
    id?: SortOrder
    sn?: SortOrder
    comment?: SortOrder
    last_check?: SortOrder
    last_tx?: SortOrder
    last_rx?: SortOrder
  }

  export type devicesAvgOrderByAggregateInput = {
    id?: SortOrder
    last_tx?: SortOrder
    last_rx?: SortOrder
  }

  export type devicesMaxOrderByAggregateInput = {
    id?: SortOrder
    sn?: SortOrder
    comment?: SortOrder
    last_check?: SortOrder
    last_tx?: SortOrder
    last_rx?: SortOrder
  }

  export type devicesMinOrderByAggregateInput = {
    id?: SortOrder
    sn?: SortOrder
    comment?: SortOrder
    last_check?: SortOrder
    last_tx?: SortOrder
    last_rx?: SortOrder
  }

  export type devicesSumOrderByAggregateInput = {
    id?: SortOrder
    last_tx?: SortOrder
    last_rx?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type raw_bandwidth_logsOrderByRelevanceInput = {
    fields: raw_bandwidth_logsOrderByRelevanceFieldEnum | raw_bandwidth_logsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type raw_bandwidth_logsCountOrderByAggregateInput = {
    log_id?: SortOrder
    user_id?: SortOrder
    source_ip?: SortOrder
    destination_ip?: SortOrder
    tx_bytes?: SortOrder
    rx_bytes?: SortOrder
    timestamp?: SortOrder
  }

  export type raw_bandwidth_logsAvgOrderByAggregateInput = {
    log_id?: SortOrder
    user_id?: SortOrder
    tx_bytes?: SortOrder
    rx_bytes?: SortOrder
  }

  export type raw_bandwidth_logsMaxOrderByAggregateInput = {
    log_id?: SortOrder
    user_id?: SortOrder
    source_ip?: SortOrder
    destination_ip?: SortOrder
    tx_bytes?: SortOrder
    rx_bytes?: SortOrder
    timestamp?: SortOrder
  }

  export type raw_bandwidth_logsMinOrderByAggregateInput = {
    log_id?: SortOrder
    user_id?: SortOrder
    source_ip?: SortOrder
    destination_ip?: SortOrder
    tx_bytes?: SortOrder
    rx_bytes?: SortOrder
    timestamp?: SortOrder
  }

  export type raw_bandwidth_logsSumOrderByAggregateInput = {
    log_id?: SortOrder
    user_id?: SortOrder
    tx_bytes?: SortOrder
    rx_bytes?: SortOrder
  }

  export type DevicesScalarRelationFilter = {
    is?: devicesWhereInput
    isNot?: devicesWhereInput
  }

  export type trafficCountOrderByAggregateInput = {
    id?: SortOrder
    device_id?: SortOrder
    timestamp?: SortOrder
    tx?: SortOrder
    rx?: SortOrder
  }

  export type trafficAvgOrderByAggregateInput = {
    id?: SortOrder
    device_id?: SortOrder
    tx?: SortOrder
    rx?: SortOrder
  }

  export type trafficMaxOrderByAggregateInput = {
    id?: SortOrder
    device_id?: SortOrder
    timestamp?: SortOrder
    tx?: SortOrder
    rx?: SortOrder
  }

  export type trafficMinOrderByAggregateInput = {
    id?: SortOrder
    device_id?: SortOrder
    timestamp?: SortOrder
    tx?: SortOrder
    rx?: SortOrder
  }

  export type trafficSumOrderByAggregateInput = {
    id?: SortOrder
    device_id?: SortOrder
    tx?: SortOrder
    rx?: SortOrder
  }

  export type Aggregated_bandwidth_logs_30minListRelationFilter = {
    every?: aggregated_bandwidth_logs_30minWhereInput
    some?: aggregated_bandwidth_logs_30minWhereInput
    none?: aggregated_bandwidth_logs_30minWhereInput
  }

  export type Aggregated_bandwidth_logs_3hrListRelationFilter = {
    every?: aggregated_bandwidth_logs_3hrWhereInput
    some?: aggregated_bandwidth_logs_3hrWhereInput
    none?: aggregated_bandwidth_logs_3hrWhereInput
  }

  export type Raw_bandwidth_logsListRelationFilter = {
    every?: raw_bandwidth_logsWhereInput
    some?: raw_bandwidth_logsWhereInput
    none?: raw_bandwidth_logsWhereInput
  }

  export type aggregated_bandwidth_logs_30minOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type aggregated_bandwidth_logs_3hrOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type raw_bandwidth_logsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersOrderByRelevanceInput = {
    fields: usersOrderByRelevanceFieldEnum | usersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type usersCountOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type usersCreateNestedOneWithoutAggregated_bandwidth_logs_30minInput = {
    create?: XOR<usersCreateWithoutAggregated_bandwidth_logs_30minInput, usersUncheckedCreateWithoutAggregated_bandwidth_logs_30minInput>
    connectOrCreate?: usersCreateOrConnectWithoutAggregated_bandwidth_logs_30minInput
    connect?: usersWhereUniqueInput
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type usersUpdateOneRequiredWithoutAggregated_bandwidth_logs_30minNestedInput = {
    create?: XOR<usersCreateWithoutAggregated_bandwidth_logs_30minInput, usersUncheckedCreateWithoutAggregated_bandwidth_logs_30minInput>
    connectOrCreate?: usersCreateOrConnectWithoutAggregated_bandwidth_logs_30minInput
    upsert?: usersUpsertWithoutAggregated_bandwidth_logs_30minInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutAggregated_bandwidth_logs_30minInput, usersUpdateWithoutAggregated_bandwidth_logs_30minInput>, usersUncheckedUpdateWithoutAggregated_bandwidth_logs_30minInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type usersCreateNestedOneWithoutAggregated_bandwidth_logs_3hrInput = {
    create?: XOR<usersCreateWithoutAggregated_bandwidth_logs_3hrInput, usersUncheckedCreateWithoutAggregated_bandwidth_logs_3hrInput>
    connectOrCreate?: usersCreateOrConnectWithoutAggregated_bandwidth_logs_3hrInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutAggregated_bandwidth_logs_3hrNestedInput = {
    create?: XOR<usersCreateWithoutAggregated_bandwidth_logs_3hrInput, usersUncheckedCreateWithoutAggregated_bandwidth_logs_3hrInput>
    connectOrCreate?: usersCreateOrConnectWithoutAggregated_bandwidth_logs_3hrInput
    upsert?: usersUpsertWithoutAggregated_bandwidth_logs_3hrInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutAggregated_bandwidth_logs_3hrInput, usersUpdateWithoutAggregated_bandwidth_logs_3hrInput>, usersUncheckedUpdateWithoutAggregated_bandwidth_logs_3hrInput>
  }

  export type trafficCreateNestedManyWithoutDevicesInput = {
    create?: XOR<trafficCreateWithoutDevicesInput, trafficUncheckedCreateWithoutDevicesInput> | trafficCreateWithoutDevicesInput[] | trafficUncheckedCreateWithoutDevicesInput[]
    connectOrCreate?: trafficCreateOrConnectWithoutDevicesInput | trafficCreateOrConnectWithoutDevicesInput[]
    createMany?: trafficCreateManyDevicesInputEnvelope
    connect?: trafficWhereUniqueInput | trafficWhereUniqueInput[]
  }

  export type trafficUncheckedCreateNestedManyWithoutDevicesInput = {
    create?: XOR<trafficCreateWithoutDevicesInput, trafficUncheckedCreateWithoutDevicesInput> | trafficCreateWithoutDevicesInput[] | trafficUncheckedCreateWithoutDevicesInput[]
    connectOrCreate?: trafficCreateOrConnectWithoutDevicesInput | trafficCreateOrConnectWithoutDevicesInput[]
    createMany?: trafficCreateManyDevicesInputEnvelope
    connect?: trafficWhereUniqueInput | trafficWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type trafficUpdateManyWithoutDevicesNestedInput = {
    create?: XOR<trafficCreateWithoutDevicesInput, trafficUncheckedCreateWithoutDevicesInput> | trafficCreateWithoutDevicesInput[] | trafficUncheckedCreateWithoutDevicesInput[]
    connectOrCreate?: trafficCreateOrConnectWithoutDevicesInput | trafficCreateOrConnectWithoutDevicesInput[]
    upsert?: trafficUpsertWithWhereUniqueWithoutDevicesInput | trafficUpsertWithWhereUniqueWithoutDevicesInput[]
    createMany?: trafficCreateManyDevicesInputEnvelope
    set?: trafficWhereUniqueInput | trafficWhereUniqueInput[]
    disconnect?: trafficWhereUniqueInput | trafficWhereUniqueInput[]
    delete?: trafficWhereUniqueInput | trafficWhereUniqueInput[]
    connect?: trafficWhereUniqueInput | trafficWhereUniqueInput[]
    update?: trafficUpdateWithWhereUniqueWithoutDevicesInput | trafficUpdateWithWhereUniqueWithoutDevicesInput[]
    updateMany?: trafficUpdateManyWithWhereWithoutDevicesInput | trafficUpdateManyWithWhereWithoutDevicesInput[]
    deleteMany?: trafficScalarWhereInput | trafficScalarWhereInput[]
  }

  export type trafficUncheckedUpdateManyWithoutDevicesNestedInput = {
    create?: XOR<trafficCreateWithoutDevicesInput, trafficUncheckedCreateWithoutDevicesInput> | trafficCreateWithoutDevicesInput[] | trafficUncheckedCreateWithoutDevicesInput[]
    connectOrCreate?: trafficCreateOrConnectWithoutDevicesInput | trafficCreateOrConnectWithoutDevicesInput[]
    upsert?: trafficUpsertWithWhereUniqueWithoutDevicesInput | trafficUpsertWithWhereUniqueWithoutDevicesInput[]
    createMany?: trafficCreateManyDevicesInputEnvelope
    set?: trafficWhereUniqueInput | trafficWhereUniqueInput[]
    disconnect?: trafficWhereUniqueInput | trafficWhereUniqueInput[]
    delete?: trafficWhereUniqueInput | trafficWhereUniqueInput[]
    connect?: trafficWhereUniqueInput | trafficWhereUniqueInput[]
    update?: trafficUpdateWithWhereUniqueWithoutDevicesInput | trafficUpdateWithWhereUniqueWithoutDevicesInput[]
    updateMany?: trafficUpdateManyWithWhereWithoutDevicesInput | trafficUpdateManyWithWhereWithoutDevicesInput[]
    deleteMany?: trafficScalarWhereInput | trafficScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutRaw_bandwidth_logsInput = {
    create?: XOR<usersCreateWithoutRaw_bandwidth_logsInput, usersUncheckedCreateWithoutRaw_bandwidth_logsInput>
    connectOrCreate?: usersCreateOrConnectWithoutRaw_bandwidth_logsInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutRaw_bandwidth_logsNestedInput = {
    create?: XOR<usersCreateWithoutRaw_bandwidth_logsInput, usersUncheckedCreateWithoutRaw_bandwidth_logsInput>
    connectOrCreate?: usersCreateOrConnectWithoutRaw_bandwidth_logsInput
    upsert?: usersUpsertWithoutRaw_bandwidth_logsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutRaw_bandwidth_logsInput, usersUpdateWithoutRaw_bandwidth_logsInput>, usersUncheckedUpdateWithoutRaw_bandwidth_logsInput>
  }

  export type devicesCreateNestedOneWithoutTrafficInput = {
    create?: XOR<devicesCreateWithoutTrafficInput, devicesUncheckedCreateWithoutTrafficInput>
    connectOrCreate?: devicesCreateOrConnectWithoutTrafficInput
    connect?: devicesWhereUniqueInput
  }

  export type devicesUpdateOneRequiredWithoutTrafficNestedInput = {
    create?: XOR<devicesCreateWithoutTrafficInput, devicesUncheckedCreateWithoutTrafficInput>
    connectOrCreate?: devicesCreateOrConnectWithoutTrafficInput
    upsert?: devicesUpsertWithoutTrafficInput
    connect?: devicesWhereUniqueInput
    update?: XOR<XOR<devicesUpdateToOneWithWhereWithoutTrafficInput, devicesUpdateWithoutTrafficInput>, devicesUncheckedUpdateWithoutTrafficInput>
  }

  export type aggregated_bandwidth_logs_30minCreateNestedManyWithoutUsersInput = {
    create?: XOR<aggregated_bandwidth_logs_30minCreateWithoutUsersInput, aggregated_bandwidth_logs_30minUncheckedCreateWithoutUsersInput> | aggregated_bandwidth_logs_30minCreateWithoutUsersInput[] | aggregated_bandwidth_logs_30minUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: aggregated_bandwidth_logs_30minCreateOrConnectWithoutUsersInput | aggregated_bandwidth_logs_30minCreateOrConnectWithoutUsersInput[]
    createMany?: aggregated_bandwidth_logs_30minCreateManyUsersInputEnvelope
    connect?: aggregated_bandwidth_logs_30minWhereUniqueInput | aggregated_bandwidth_logs_30minWhereUniqueInput[]
  }

  export type aggregated_bandwidth_logs_3hrCreateNestedManyWithoutUsersInput = {
    create?: XOR<aggregated_bandwidth_logs_3hrCreateWithoutUsersInput, aggregated_bandwidth_logs_3hrUncheckedCreateWithoutUsersInput> | aggregated_bandwidth_logs_3hrCreateWithoutUsersInput[] | aggregated_bandwidth_logs_3hrUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: aggregated_bandwidth_logs_3hrCreateOrConnectWithoutUsersInput | aggregated_bandwidth_logs_3hrCreateOrConnectWithoutUsersInput[]
    createMany?: aggregated_bandwidth_logs_3hrCreateManyUsersInputEnvelope
    connect?: aggregated_bandwidth_logs_3hrWhereUniqueInput | aggregated_bandwidth_logs_3hrWhereUniqueInput[]
  }

  export type raw_bandwidth_logsCreateNestedManyWithoutUsersInput = {
    create?: XOR<raw_bandwidth_logsCreateWithoutUsersInput, raw_bandwidth_logsUncheckedCreateWithoutUsersInput> | raw_bandwidth_logsCreateWithoutUsersInput[] | raw_bandwidth_logsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: raw_bandwidth_logsCreateOrConnectWithoutUsersInput | raw_bandwidth_logsCreateOrConnectWithoutUsersInput[]
    createMany?: raw_bandwidth_logsCreateManyUsersInputEnvelope
    connect?: raw_bandwidth_logsWhereUniqueInput | raw_bandwidth_logsWhereUniqueInput[]
  }

  export type aggregated_bandwidth_logs_30minUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<aggregated_bandwidth_logs_30minCreateWithoutUsersInput, aggregated_bandwidth_logs_30minUncheckedCreateWithoutUsersInput> | aggregated_bandwidth_logs_30minCreateWithoutUsersInput[] | aggregated_bandwidth_logs_30minUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: aggregated_bandwidth_logs_30minCreateOrConnectWithoutUsersInput | aggregated_bandwidth_logs_30minCreateOrConnectWithoutUsersInput[]
    createMany?: aggregated_bandwidth_logs_30minCreateManyUsersInputEnvelope
    connect?: aggregated_bandwidth_logs_30minWhereUniqueInput | aggregated_bandwidth_logs_30minWhereUniqueInput[]
  }

  export type aggregated_bandwidth_logs_3hrUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<aggregated_bandwidth_logs_3hrCreateWithoutUsersInput, aggregated_bandwidth_logs_3hrUncheckedCreateWithoutUsersInput> | aggregated_bandwidth_logs_3hrCreateWithoutUsersInput[] | aggregated_bandwidth_logs_3hrUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: aggregated_bandwidth_logs_3hrCreateOrConnectWithoutUsersInput | aggregated_bandwidth_logs_3hrCreateOrConnectWithoutUsersInput[]
    createMany?: aggregated_bandwidth_logs_3hrCreateManyUsersInputEnvelope
    connect?: aggregated_bandwidth_logs_3hrWhereUniqueInput | aggregated_bandwidth_logs_3hrWhereUniqueInput[]
  }

  export type raw_bandwidth_logsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<raw_bandwidth_logsCreateWithoutUsersInput, raw_bandwidth_logsUncheckedCreateWithoutUsersInput> | raw_bandwidth_logsCreateWithoutUsersInput[] | raw_bandwidth_logsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: raw_bandwidth_logsCreateOrConnectWithoutUsersInput | raw_bandwidth_logsCreateOrConnectWithoutUsersInput[]
    createMany?: raw_bandwidth_logsCreateManyUsersInputEnvelope
    connect?: raw_bandwidth_logsWhereUniqueInput | raw_bandwidth_logsWhereUniqueInput[]
  }

  export type aggregated_bandwidth_logs_30minUpdateManyWithoutUsersNestedInput = {
    create?: XOR<aggregated_bandwidth_logs_30minCreateWithoutUsersInput, aggregated_bandwidth_logs_30minUncheckedCreateWithoutUsersInput> | aggregated_bandwidth_logs_30minCreateWithoutUsersInput[] | aggregated_bandwidth_logs_30minUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: aggregated_bandwidth_logs_30minCreateOrConnectWithoutUsersInput | aggregated_bandwidth_logs_30minCreateOrConnectWithoutUsersInput[]
    upsert?: aggregated_bandwidth_logs_30minUpsertWithWhereUniqueWithoutUsersInput | aggregated_bandwidth_logs_30minUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: aggregated_bandwidth_logs_30minCreateManyUsersInputEnvelope
    set?: aggregated_bandwidth_logs_30minWhereUniqueInput | aggregated_bandwidth_logs_30minWhereUniqueInput[]
    disconnect?: aggregated_bandwidth_logs_30minWhereUniqueInput | aggregated_bandwidth_logs_30minWhereUniqueInput[]
    delete?: aggregated_bandwidth_logs_30minWhereUniqueInput | aggregated_bandwidth_logs_30minWhereUniqueInput[]
    connect?: aggregated_bandwidth_logs_30minWhereUniqueInput | aggregated_bandwidth_logs_30minWhereUniqueInput[]
    update?: aggregated_bandwidth_logs_30minUpdateWithWhereUniqueWithoutUsersInput | aggregated_bandwidth_logs_30minUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: aggregated_bandwidth_logs_30minUpdateManyWithWhereWithoutUsersInput | aggregated_bandwidth_logs_30minUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: aggregated_bandwidth_logs_30minScalarWhereInput | aggregated_bandwidth_logs_30minScalarWhereInput[]
  }

  export type aggregated_bandwidth_logs_3hrUpdateManyWithoutUsersNestedInput = {
    create?: XOR<aggregated_bandwidth_logs_3hrCreateWithoutUsersInput, aggregated_bandwidth_logs_3hrUncheckedCreateWithoutUsersInput> | aggregated_bandwidth_logs_3hrCreateWithoutUsersInput[] | aggregated_bandwidth_logs_3hrUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: aggregated_bandwidth_logs_3hrCreateOrConnectWithoutUsersInput | aggregated_bandwidth_logs_3hrCreateOrConnectWithoutUsersInput[]
    upsert?: aggregated_bandwidth_logs_3hrUpsertWithWhereUniqueWithoutUsersInput | aggregated_bandwidth_logs_3hrUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: aggregated_bandwidth_logs_3hrCreateManyUsersInputEnvelope
    set?: aggregated_bandwidth_logs_3hrWhereUniqueInput | aggregated_bandwidth_logs_3hrWhereUniqueInput[]
    disconnect?: aggregated_bandwidth_logs_3hrWhereUniqueInput | aggregated_bandwidth_logs_3hrWhereUniqueInput[]
    delete?: aggregated_bandwidth_logs_3hrWhereUniqueInput | aggregated_bandwidth_logs_3hrWhereUniqueInput[]
    connect?: aggregated_bandwidth_logs_3hrWhereUniqueInput | aggregated_bandwidth_logs_3hrWhereUniqueInput[]
    update?: aggregated_bandwidth_logs_3hrUpdateWithWhereUniqueWithoutUsersInput | aggregated_bandwidth_logs_3hrUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: aggregated_bandwidth_logs_3hrUpdateManyWithWhereWithoutUsersInput | aggregated_bandwidth_logs_3hrUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: aggregated_bandwidth_logs_3hrScalarWhereInput | aggregated_bandwidth_logs_3hrScalarWhereInput[]
  }

  export type raw_bandwidth_logsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<raw_bandwidth_logsCreateWithoutUsersInput, raw_bandwidth_logsUncheckedCreateWithoutUsersInput> | raw_bandwidth_logsCreateWithoutUsersInput[] | raw_bandwidth_logsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: raw_bandwidth_logsCreateOrConnectWithoutUsersInput | raw_bandwidth_logsCreateOrConnectWithoutUsersInput[]
    upsert?: raw_bandwidth_logsUpsertWithWhereUniqueWithoutUsersInput | raw_bandwidth_logsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: raw_bandwidth_logsCreateManyUsersInputEnvelope
    set?: raw_bandwidth_logsWhereUniqueInput | raw_bandwidth_logsWhereUniqueInput[]
    disconnect?: raw_bandwidth_logsWhereUniqueInput | raw_bandwidth_logsWhereUniqueInput[]
    delete?: raw_bandwidth_logsWhereUniqueInput | raw_bandwidth_logsWhereUniqueInput[]
    connect?: raw_bandwidth_logsWhereUniqueInput | raw_bandwidth_logsWhereUniqueInput[]
    update?: raw_bandwidth_logsUpdateWithWhereUniqueWithoutUsersInput | raw_bandwidth_logsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: raw_bandwidth_logsUpdateManyWithWhereWithoutUsersInput | raw_bandwidth_logsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: raw_bandwidth_logsScalarWhereInput | raw_bandwidth_logsScalarWhereInput[]
  }

  export type aggregated_bandwidth_logs_30minUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<aggregated_bandwidth_logs_30minCreateWithoutUsersInput, aggregated_bandwidth_logs_30minUncheckedCreateWithoutUsersInput> | aggregated_bandwidth_logs_30minCreateWithoutUsersInput[] | aggregated_bandwidth_logs_30minUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: aggregated_bandwidth_logs_30minCreateOrConnectWithoutUsersInput | aggregated_bandwidth_logs_30minCreateOrConnectWithoutUsersInput[]
    upsert?: aggregated_bandwidth_logs_30minUpsertWithWhereUniqueWithoutUsersInput | aggregated_bandwidth_logs_30minUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: aggregated_bandwidth_logs_30minCreateManyUsersInputEnvelope
    set?: aggregated_bandwidth_logs_30minWhereUniqueInput | aggregated_bandwidth_logs_30minWhereUniqueInput[]
    disconnect?: aggregated_bandwidth_logs_30minWhereUniqueInput | aggregated_bandwidth_logs_30minWhereUniqueInput[]
    delete?: aggregated_bandwidth_logs_30minWhereUniqueInput | aggregated_bandwidth_logs_30minWhereUniqueInput[]
    connect?: aggregated_bandwidth_logs_30minWhereUniqueInput | aggregated_bandwidth_logs_30minWhereUniqueInput[]
    update?: aggregated_bandwidth_logs_30minUpdateWithWhereUniqueWithoutUsersInput | aggregated_bandwidth_logs_30minUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: aggregated_bandwidth_logs_30minUpdateManyWithWhereWithoutUsersInput | aggregated_bandwidth_logs_30minUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: aggregated_bandwidth_logs_30minScalarWhereInput | aggregated_bandwidth_logs_30minScalarWhereInput[]
  }

  export type aggregated_bandwidth_logs_3hrUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<aggregated_bandwidth_logs_3hrCreateWithoutUsersInput, aggregated_bandwidth_logs_3hrUncheckedCreateWithoutUsersInput> | aggregated_bandwidth_logs_3hrCreateWithoutUsersInput[] | aggregated_bandwidth_logs_3hrUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: aggregated_bandwidth_logs_3hrCreateOrConnectWithoutUsersInput | aggregated_bandwidth_logs_3hrCreateOrConnectWithoutUsersInput[]
    upsert?: aggregated_bandwidth_logs_3hrUpsertWithWhereUniqueWithoutUsersInput | aggregated_bandwidth_logs_3hrUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: aggregated_bandwidth_logs_3hrCreateManyUsersInputEnvelope
    set?: aggregated_bandwidth_logs_3hrWhereUniqueInput | aggregated_bandwidth_logs_3hrWhereUniqueInput[]
    disconnect?: aggregated_bandwidth_logs_3hrWhereUniqueInput | aggregated_bandwidth_logs_3hrWhereUniqueInput[]
    delete?: aggregated_bandwidth_logs_3hrWhereUniqueInput | aggregated_bandwidth_logs_3hrWhereUniqueInput[]
    connect?: aggregated_bandwidth_logs_3hrWhereUniqueInput | aggregated_bandwidth_logs_3hrWhereUniqueInput[]
    update?: aggregated_bandwidth_logs_3hrUpdateWithWhereUniqueWithoutUsersInput | aggregated_bandwidth_logs_3hrUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: aggregated_bandwidth_logs_3hrUpdateManyWithWhereWithoutUsersInput | aggregated_bandwidth_logs_3hrUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: aggregated_bandwidth_logs_3hrScalarWhereInput | aggregated_bandwidth_logs_3hrScalarWhereInput[]
  }

  export type raw_bandwidth_logsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<raw_bandwidth_logsCreateWithoutUsersInput, raw_bandwidth_logsUncheckedCreateWithoutUsersInput> | raw_bandwidth_logsCreateWithoutUsersInput[] | raw_bandwidth_logsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: raw_bandwidth_logsCreateOrConnectWithoutUsersInput | raw_bandwidth_logsCreateOrConnectWithoutUsersInput[]
    upsert?: raw_bandwidth_logsUpsertWithWhereUniqueWithoutUsersInput | raw_bandwidth_logsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: raw_bandwidth_logsCreateManyUsersInputEnvelope
    set?: raw_bandwidth_logsWhereUniqueInput | raw_bandwidth_logsWhereUniqueInput[]
    disconnect?: raw_bandwidth_logsWhereUniqueInput | raw_bandwidth_logsWhereUniqueInput[]
    delete?: raw_bandwidth_logsWhereUniqueInput | raw_bandwidth_logsWhereUniqueInput[]
    connect?: raw_bandwidth_logsWhereUniqueInput | raw_bandwidth_logsWhereUniqueInput[]
    update?: raw_bandwidth_logsUpdateWithWhereUniqueWithoutUsersInput | raw_bandwidth_logsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: raw_bandwidth_logsUpdateManyWithWhereWithoutUsersInput | raw_bandwidth_logsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: raw_bandwidth_logsScalarWhereInput | raw_bandwidth_logsScalarWhereInput[]
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type usersCreateWithoutAggregated_bandwidth_logs_30minInput = {
    username: string
    aggregated_bandwidth_logs_3hr?: aggregated_bandwidth_logs_3hrCreateNestedManyWithoutUsersInput
    raw_bandwidth_logs?: raw_bandwidth_logsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutAggregated_bandwidth_logs_30minInput = {
    user_id?: number
    username: string
    aggregated_bandwidth_logs_3hr?: aggregated_bandwidth_logs_3hrUncheckedCreateNestedManyWithoutUsersInput
    raw_bandwidth_logs?: raw_bandwidth_logsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutAggregated_bandwidth_logs_30minInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutAggregated_bandwidth_logs_30minInput, usersUncheckedCreateWithoutAggregated_bandwidth_logs_30minInput>
  }

  export type usersUpsertWithoutAggregated_bandwidth_logs_30minInput = {
    update: XOR<usersUpdateWithoutAggregated_bandwidth_logs_30minInput, usersUncheckedUpdateWithoutAggregated_bandwidth_logs_30minInput>
    create: XOR<usersCreateWithoutAggregated_bandwidth_logs_30minInput, usersUncheckedCreateWithoutAggregated_bandwidth_logs_30minInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutAggregated_bandwidth_logs_30minInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutAggregated_bandwidth_logs_30minInput, usersUncheckedUpdateWithoutAggregated_bandwidth_logs_30minInput>
  }

  export type usersUpdateWithoutAggregated_bandwidth_logs_30minInput = {
    username?: StringFieldUpdateOperationsInput | string
    aggregated_bandwidth_logs_3hr?: aggregated_bandwidth_logs_3hrUpdateManyWithoutUsersNestedInput
    raw_bandwidth_logs?: raw_bandwidth_logsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutAggregated_bandwidth_logs_30minInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    aggregated_bandwidth_logs_3hr?: aggregated_bandwidth_logs_3hrUncheckedUpdateManyWithoutUsersNestedInput
    raw_bandwidth_logs?: raw_bandwidth_logsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateWithoutAggregated_bandwidth_logs_3hrInput = {
    username: string
    aggregated_bandwidth_logs_30min?: aggregated_bandwidth_logs_30minCreateNestedManyWithoutUsersInput
    raw_bandwidth_logs?: raw_bandwidth_logsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutAggregated_bandwidth_logs_3hrInput = {
    user_id?: number
    username: string
    aggregated_bandwidth_logs_30min?: aggregated_bandwidth_logs_30minUncheckedCreateNestedManyWithoutUsersInput
    raw_bandwidth_logs?: raw_bandwidth_logsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutAggregated_bandwidth_logs_3hrInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutAggregated_bandwidth_logs_3hrInput, usersUncheckedCreateWithoutAggregated_bandwidth_logs_3hrInput>
  }

  export type usersUpsertWithoutAggregated_bandwidth_logs_3hrInput = {
    update: XOR<usersUpdateWithoutAggregated_bandwidth_logs_3hrInput, usersUncheckedUpdateWithoutAggregated_bandwidth_logs_3hrInput>
    create: XOR<usersCreateWithoutAggregated_bandwidth_logs_3hrInput, usersUncheckedCreateWithoutAggregated_bandwidth_logs_3hrInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutAggregated_bandwidth_logs_3hrInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutAggregated_bandwidth_logs_3hrInput, usersUncheckedUpdateWithoutAggregated_bandwidth_logs_3hrInput>
  }

  export type usersUpdateWithoutAggregated_bandwidth_logs_3hrInput = {
    username?: StringFieldUpdateOperationsInput | string
    aggregated_bandwidth_logs_30min?: aggregated_bandwidth_logs_30minUpdateManyWithoutUsersNestedInput
    raw_bandwidth_logs?: raw_bandwidth_logsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutAggregated_bandwidth_logs_3hrInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    aggregated_bandwidth_logs_30min?: aggregated_bandwidth_logs_30minUncheckedUpdateManyWithoutUsersNestedInput
    raw_bandwidth_logs?: raw_bandwidth_logsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type trafficCreateWithoutDevicesInput = {
    timestamp?: Date | string | null
    tx?: bigint | number | null
    rx?: bigint | number | null
  }

  export type trafficUncheckedCreateWithoutDevicesInput = {
    id?: number
    timestamp?: Date | string | null
    tx?: bigint | number | null
    rx?: bigint | number | null
  }

  export type trafficCreateOrConnectWithoutDevicesInput = {
    where: trafficWhereUniqueInput
    create: XOR<trafficCreateWithoutDevicesInput, trafficUncheckedCreateWithoutDevicesInput>
  }

  export type trafficCreateManyDevicesInputEnvelope = {
    data: trafficCreateManyDevicesInput | trafficCreateManyDevicesInput[]
    skipDuplicates?: boolean
  }

  export type trafficUpsertWithWhereUniqueWithoutDevicesInput = {
    where: trafficWhereUniqueInput
    update: XOR<trafficUpdateWithoutDevicesInput, trafficUncheckedUpdateWithoutDevicesInput>
    create: XOR<trafficCreateWithoutDevicesInput, trafficUncheckedCreateWithoutDevicesInput>
  }

  export type trafficUpdateWithWhereUniqueWithoutDevicesInput = {
    where: trafficWhereUniqueInput
    data: XOR<trafficUpdateWithoutDevicesInput, trafficUncheckedUpdateWithoutDevicesInput>
  }

  export type trafficUpdateManyWithWhereWithoutDevicesInput = {
    where: trafficScalarWhereInput
    data: XOR<trafficUpdateManyMutationInput, trafficUncheckedUpdateManyWithoutDevicesInput>
  }

  export type trafficScalarWhereInput = {
    AND?: trafficScalarWhereInput | trafficScalarWhereInput[]
    OR?: trafficScalarWhereInput[]
    NOT?: trafficScalarWhereInput | trafficScalarWhereInput[]
    id?: IntFilter<"traffic"> | number
    device_id?: IntFilter<"traffic"> | number
    timestamp?: DateTimeNullableFilter<"traffic"> | Date | string | null
    tx?: BigIntNullableFilter<"traffic"> | bigint | number | null
    rx?: BigIntNullableFilter<"traffic"> | bigint | number | null
  }

  export type usersCreateWithoutRaw_bandwidth_logsInput = {
    username: string
    aggregated_bandwidth_logs_30min?: aggregated_bandwidth_logs_30minCreateNestedManyWithoutUsersInput
    aggregated_bandwidth_logs_3hr?: aggregated_bandwidth_logs_3hrCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutRaw_bandwidth_logsInput = {
    user_id?: number
    username: string
    aggregated_bandwidth_logs_30min?: aggregated_bandwidth_logs_30minUncheckedCreateNestedManyWithoutUsersInput
    aggregated_bandwidth_logs_3hr?: aggregated_bandwidth_logs_3hrUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutRaw_bandwidth_logsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutRaw_bandwidth_logsInput, usersUncheckedCreateWithoutRaw_bandwidth_logsInput>
  }

  export type usersUpsertWithoutRaw_bandwidth_logsInput = {
    update: XOR<usersUpdateWithoutRaw_bandwidth_logsInput, usersUncheckedUpdateWithoutRaw_bandwidth_logsInput>
    create: XOR<usersCreateWithoutRaw_bandwidth_logsInput, usersUncheckedCreateWithoutRaw_bandwidth_logsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutRaw_bandwidth_logsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutRaw_bandwidth_logsInput, usersUncheckedUpdateWithoutRaw_bandwidth_logsInput>
  }

  export type usersUpdateWithoutRaw_bandwidth_logsInput = {
    username?: StringFieldUpdateOperationsInput | string
    aggregated_bandwidth_logs_30min?: aggregated_bandwidth_logs_30minUpdateManyWithoutUsersNestedInput
    aggregated_bandwidth_logs_3hr?: aggregated_bandwidth_logs_3hrUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutRaw_bandwidth_logsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    aggregated_bandwidth_logs_30min?: aggregated_bandwidth_logs_30minUncheckedUpdateManyWithoutUsersNestedInput
    aggregated_bandwidth_logs_3hr?: aggregated_bandwidth_logs_3hrUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type devicesCreateWithoutTrafficInput = {
    sn: string
    comment?: string | null
    last_check?: Date | string | null
    last_tx?: bigint | number | null
    last_rx?: bigint | number | null
  }

  export type devicesUncheckedCreateWithoutTrafficInput = {
    id?: number
    sn: string
    comment?: string | null
    last_check?: Date | string | null
    last_tx?: bigint | number | null
    last_rx?: bigint | number | null
  }

  export type devicesCreateOrConnectWithoutTrafficInput = {
    where: devicesWhereUniqueInput
    create: XOR<devicesCreateWithoutTrafficInput, devicesUncheckedCreateWithoutTrafficInput>
  }

  export type devicesUpsertWithoutTrafficInput = {
    update: XOR<devicesUpdateWithoutTrafficInput, devicesUncheckedUpdateWithoutTrafficInput>
    create: XOR<devicesCreateWithoutTrafficInput, devicesUncheckedCreateWithoutTrafficInput>
    where?: devicesWhereInput
  }

  export type devicesUpdateToOneWithWhereWithoutTrafficInput = {
    where?: devicesWhereInput
    data: XOR<devicesUpdateWithoutTrafficInput, devicesUncheckedUpdateWithoutTrafficInput>
  }

  export type devicesUpdateWithoutTrafficInput = {
    sn?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    last_check?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_tx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    last_rx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type devicesUncheckedUpdateWithoutTrafficInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    last_check?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_tx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    last_rx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type aggregated_bandwidth_logs_30minCreateWithoutUsersInput = {
    agg_id?: bigint | number
    interval_start: Date | string
    interval_end: Date | string
    total_tx_bytes: bigint | number
    total_rx_bytes: bigint | number
  }

  export type aggregated_bandwidth_logs_30minUncheckedCreateWithoutUsersInput = {
    agg_id?: bigint | number
    interval_start: Date | string
    interval_end: Date | string
    total_tx_bytes: bigint | number
    total_rx_bytes: bigint | number
  }

  export type aggregated_bandwidth_logs_30minCreateOrConnectWithoutUsersInput = {
    where: aggregated_bandwidth_logs_30minWhereUniqueInput
    create: XOR<aggregated_bandwidth_logs_30minCreateWithoutUsersInput, aggregated_bandwidth_logs_30minUncheckedCreateWithoutUsersInput>
  }

  export type aggregated_bandwidth_logs_30minCreateManyUsersInputEnvelope = {
    data: aggregated_bandwidth_logs_30minCreateManyUsersInput | aggregated_bandwidth_logs_30minCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type aggregated_bandwidth_logs_3hrCreateWithoutUsersInput = {
    agg_id?: bigint | number
    interval_start: Date | string
    interval_end: Date | string
    total_tx_bytes: bigint | number
    total_rx_bytes: bigint | number
  }

  export type aggregated_bandwidth_logs_3hrUncheckedCreateWithoutUsersInput = {
    agg_id?: bigint | number
    interval_start: Date | string
    interval_end: Date | string
    total_tx_bytes: bigint | number
    total_rx_bytes: bigint | number
  }

  export type aggregated_bandwidth_logs_3hrCreateOrConnectWithoutUsersInput = {
    where: aggregated_bandwidth_logs_3hrWhereUniqueInput
    create: XOR<aggregated_bandwidth_logs_3hrCreateWithoutUsersInput, aggregated_bandwidth_logs_3hrUncheckedCreateWithoutUsersInput>
  }

  export type aggregated_bandwidth_logs_3hrCreateManyUsersInputEnvelope = {
    data: aggregated_bandwidth_logs_3hrCreateManyUsersInput | aggregated_bandwidth_logs_3hrCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type raw_bandwidth_logsCreateWithoutUsersInput = {
    log_id?: bigint | number
    source_ip?: string | null
    destination_ip?: string | null
    tx_bytes: bigint | number
    rx_bytes: bigint | number
    timestamp: Date | string
  }

  export type raw_bandwidth_logsUncheckedCreateWithoutUsersInput = {
    log_id?: bigint | number
    source_ip?: string | null
    destination_ip?: string | null
    tx_bytes: bigint | number
    rx_bytes: bigint | number
    timestamp: Date | string
  }

  export type raw_bandwidth_logsCreateOrConnectWithoutUsersInput = {
    where: raw_bandwidth_logsWhereUniqueInput
    create: XOR<raw_bandwidth_logsCreateWithoutUsersInput, raw_bandwidth_logsUncheckedCreateWithoutUsersInput>
  }

  export type raw_bandwidth_logsCreateManyUsersInputEnvelope = {
    data: raw_bandwidth_logsCreateManyUsersInput | raw_bandwidth_logsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type aggregated_bandwidth_logs_30minUpsertWithWhereUniqueWithoutUsersInput = {
    where: aggregated_bandwidth_logs_30minWhereUniqueInput
    update: XOR<aggregated_bandwidth_logs_30minUpdateWithoutUsersInput, aggregated_bandwidth_logs_30minUncheckedUpdateWithoutUsersInput>
    create: XOR<aggregated_bandwidth_logs_30minCreateWithoutUsersInput, aggregated_bandwidth_logs_30minUncheckedCreateWithoutUsersInput>
  }

  export type aggregated_bandwidth_logs_30minUpdateWithWhereUniqueWithoutUsersInput = {
    where: aggregated_bandwidth_logs_30minWhereUniqueInput
    data: XOR<aggregated_bandwidth_logs_30minUpdateWithoutUsersInput, aggregated_bandwidth_logs_30minUncheckedUpdateWithoutUsersInput>
  }

  export type aggregated_bandwidth_logs_30minUpdateManyWithWhereWithoutUsersInput = {
    where: aggregated_bandwidth_logs_30minScalarWhereInput
    data: XOR<aggregated_bandwidth_logs_30minUpdateManyMutationInput, aggregated_bandwidth_logs_30minUncheckedUpdateManyWithoutUsersInput>
  }

  export type aggregated_bandwidth_logs_30minScalarWhereInput = {
    AND?: aggregated_bandwidth_logs_30minScalarWhereInput | aggregated_bandwidth_logs_30minScalarWhereInput[]
    OR?: aggregated_bandwidth_logs_30minScalarWhereInput[]
    NOT?: aggregated_bandwidth_logs_30minScalarWhereInput | aggregated_bandwidth_logs_30minScalarWhereInput[]
    agg_id?: BigIntFilter<"aggregated_bandwidth_logs_30min"> | bigint | number
    user_id?: IntFilter<"aggregated_bandwidth_logs_30min"> | number
    interval_start?: DateTimeFilter<"aggregated_bandwidth_logs_30min"> | Date | string
    interval_end?: DateTimeFilter<"aggregated_bandwidth_logs_30min"> | Date | string
    total_tx_bytes?: BigIntFilter<"aggregated_bandwidth_logs_30min"> | bigint | number
    total_rx_bytes?: BigIntFilter<"aggregated_bandwidth_logs_30min"> | bigint | number
  }

  export type aggregated_bandwidth_logs_3hrUpsertWithWhereUniqueWithoutUsersInput = {
    where: aggregated_bandwidth_logs_3hrWhereUniqueInput
    update: XOR<aggregated_bandwidth_logs_3hrUpdateWithoutUsersInput, aggregated_bandwidth_logs_3hrUncheckedUpdateWithoutUsersInput>
    create: XOR<aggregated_bandwidth_logs_3hrCreateWithoutUsersInput, aggregated_bandwidth_logs_3hrUncheckedCreateWithoutUsersInput>
  }

  export type aggregated_bandwidth_logs_3hrUpdateWithWhereUniqueWithoutUsersInput = {
    where: aggregated_bandwidth_logs_3hrWhereUniqueInput
    data: XOR<aggregated_bandwidth_logs_3hrUpdateWithoutUsersInput, aggregated_bandwidth_logs_3hrUncheckedUpdateWithoutUsersInput>
  }

  export type aggregated_bandwidth_logs_3hrUpdateManyWithWhereWithoutUsersInput = {
    where: aggregated_bandwidth_logs_3hrScalarWhereInput
    data: XOR<aggregated_bandwidth_logs_3hrUpdateManyMutationInput, aggregated_bandwidth_logs_3hrUncheckedUpdateManyWithoutUsersInput>
  }

  export type aggregated_bandwidth_logs_3hrScalarWhereInput = {
    AND?: aggregated_bandwidth_logs_3hrScalarWhereInput | aggregated_bandwidth_logs_3hrScalarWhereInput[]
    OR?: aggregated_bandwidth_logs_3hrScalarWhereInput[]
    NOT?: aggregated_bandwidth_logs_3hrScalarWhereInput | aggregated_bandwidth_logs_3hrScalarWhereInput[]
    agg_id?: BigIntFilter<"aggregated_bandwidth_logs_3hr"> | bigint | number
    user_id?: IntFilter<"aggregated_bandwidth_logs_3hr"> | number
    interval_start?: DateTimeFilter<"aggregated_bandwidth_logs_3hr"> | Date | string
    interval_end?: DateTimeFilter<"aggregated_bandwidth_logs_3hr"> | Date | string
    total_tx_bytes?: BigIntFilter<"aggregated_bandwidth_logs_3hr"> | bigint | number
    total_rx_bytes?: BigIntFilter<"aggregated_bandwidth_logs_3hr"> | bigint | number
  }

  export type raw_bandwidth_logsUpsertWithWhereUniqueWithoutUsersInput = {
    where: raw_bandwidth_logsWhereUniqueInput
    update: XOR<raw_bandwidth_logsUpdateWithoutUsersInput, raw_bandwidth_logsUncheckedUpdateWithoutUsersInput>
    create: XOR<raw_bandwidth_logsCreateWithoutUsersInput, raw_bandwidth_logsUncheckedCreateWithoutUsersInput>
  }

  export type raw_bandwidth_logsUpdateWithWhereUniqueWithoutUsersInput = {
    where: raw_bandwidth_logsWhereUniqueInput
    data: XOR<raw_bandwidth_logsUpdateWithoutUsersInput, raw_bandwidth_logsUncheckedUpdateWithoutUsersInput>
  }

  export type raw_bandwidth_logsUpdateManyWithWhereWithoutUsersInput = {
    where: raw_bandwidth_logsScalarWhereInput
    data: XOR<raw_bandwidth_logsUpdateManyMutationInput, raw_bandwidth_logsUncheckedUpdateManyWithoutUsersInput>
  }

  export type raw_bandwidth_logsScalarWhereInput = {
    AND?: raw_bandwidth_logsScalarWhereInput | raw_bandwidth_logsScalarWhereInput[]
    OR?: raw_bandwidth_logsScalarWhereInput[]
    NOT?: raw_bandwidth_logsScalarWhereInput | raw_bandwidth_logsScalarWhereInput[]
    log_id?: BigIntFilter<"raw_bandwidth_logs"> | bigint | number
    user_id?: IntFilter<"raw_bandwidth_logs"> | number
    source_ip?: StringNullableFilter<"raw_bandwidth_logs"> | string | null
    destination_ip?: StringNullableFilter<"raw_bandwidth_logs"> | string | null
    tx_bytes?: BigIntFilter<"raw_bandwidth_logs"> | bigint | number
    rx_bytes?: BigIntFilter<"raw_bandwidth_logs"> | bigint | number
    timestamp?: DateTimeFilter<"raw_bandwidth_logs"> | Date | string
  }

  export type trafficCreateManyDevicesInput = {
    id?: number
    timestamp?: Date | string | null
    tx?: bigint | number | null
    rx?: bigint | number | null
  }

  export type trafficUpdateWithoutDevicesInput = {
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    rx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type trafficUncheckedUpdateWithoutDevicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    rx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type trafficUncheckedUpdateManyWithoutDevicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    rx?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type aggregated_bandwidth_logs_30minCreateManyUsersInput = {
    agg_id?: bigint | number
    interval_start: Date | string
    interval_end: Date | string
    total_tx_bytes: bigint | number
    total_rx_bytes: bigint | number
  }

  export type aggregated_bandwidth_logs_3hrCreateManyUsersInput = {
    agg_id?: bigint | number
    interval_start: Date | string
    interval_end: Date | string
    total_tx_bytes: bigint | number
    total_rx_bytes: bigint | number
  }

  export type raw_bandwidth_logsCreateManyUsersInput = {
    log_id?: bigint | number
    source_ip?: string | null
    destination_ip?: string | null
    tx_bytes: bigint | number
    rx_bytes: bigint | number
    timestamp: Date | string
  }

  export type aggregated_bandwidth_logs_30minUpdateWithoutUsersInput = {
    agg_id?: BigIntFieldUpdateOperationsInput | bigint | number
    interval_start?: DateTimeFieldUpdateOperationsInput | Date | string
    interval_end?: DateTimeFieldUpdateOperationsInput | Date | string
    total_tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    total_rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type aggregated_bandwidth_logs_30minUncheckedUpdateWithoutUsersInput = {
    agg_id?: BigIntFieldUpdateOperationsInput | bigint | number
    interval_start?: DateTimeFieldUpdateOperationsInput | Date | string
    interval_end?: DateTimeFieldUpdateOperationsInput | Date | string
    total_tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    total_rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type aggregated_bandwidth_logs_30minUncheckedUpdateManyWithoutUsersInput = {
    agg_id?: BigIntFieldUpdateOperationsInput | bigint | number
    interval_start?: DateTimeFieldUpdateOperationsInput | Date | string
    interval_end?: DateTimeFieldUpdateOperationsInput | Date | string
    total_tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    total_rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type aggregated_bandwidth_logs_3hrUpdateWithoutUsersInput = {
    agg_id?: BigIntFieldUpdateOperationsInput | bigint | number
    interval_start?: DateTimeFieldUpdateOperationsInput | Date | string
    interval_end?: DateTimeFieldUpdateOperationsInput | Date | string
    total_tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    total_rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type aggregated_bandwidth_logs_3hrUncheckedUpdateWithoutUsersInput = {
    agg_id?: BigIntFieldUpdateOperationsInput | bigint | number
    interval_start?: DateTimeFieldUpdateOperationsInput | Date | string
    interval_end?: DateTimeFieldUpdateOperationsInput | Date | string
    total_tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    total_rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type aggregated_bandwidth_logs_3hrUncheckedUpdateManyWithoutUsersInput = {
    agg_id?: BigIntFieldUpdateOperationsInput | bigint | number
    interval_start?: DateTimeFieldUpdateOperationsInput | Date | string
    interval_end?: DateTimeFieldUpdateOperationsInput | Date | string
    total_tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    total_rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type raw_bandwidth_logsUpdateWithoutUsersInput = {
    log_id?: BigIntFieldUpdateOperationsInput | bigint | number
    source_ip?: NullableStringFieldUpdateOperationsInput | string | null
    destination_ip?: NullableStringFieldUpdateOperationsInput | string | null
    tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type raw_bandwidth_logsUncheckedUpdateWithoutUsersInput = {
    log_id?: BigIntFieldUpdateOperationsInput | bigint | number
    source_ip?: NullableStringFieldUpdateOperationsInput | string | null
    destination_ip?: NullableStringFieldUpdateOperationsInput | string | null
    tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type raw_bandwidth_logsUncheckedUpdateManyWithoutUsersInput = {
    log_id?: BigIntFieldUpdateOperationsInput | bigint | number
    source_ip?: NullableStringFieldUpdateOperationsInput | string | null
    destination_ip?: NullableStringFieldUpdateOperationsInput | string | null
    tx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    rx_bytes?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}