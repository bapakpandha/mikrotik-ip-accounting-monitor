generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/generated"
  binaryTargets = ["native", "windows", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model aggregated_bandwidth_logs_30min {
  agg_id         BigInt   @id @default(autoincrement())
  user_id        Int
  interval_start DateTime @db.DateTime(0)
  interval_end   DateTime @db.DateTime(0)
  total_tx_bytes BigInt   @db.UnsignedBigInt
  total_rx_bytes BigInt   @db.UnsignedBigInt
  users          users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "aggregated_bandwidth_logs_30min_ibfk_1")

  @@index([interval_start], map: "interval_start")
  @@index([user_id], map: "user_id")
}

model aggregated_bandwidth_logs_3hr {
  agg_id         BigInt   @id @default(autoincrement())
  user_id        Int
  interval_start DateTime @db.DateTime(0)
  interval_end   DateTime @db.DateTime(0)
  total_tx_bytes BigInt   @db.UnsignedBigInt
  total_rx_bytes BigInt   @db.UnsignedBigInt
  users          users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "aggregated_bandwidth_logs_3hr_ibfk_1")

  @@index([interval_start], map: "interval_start")
  @@index([user_id], map: "user_id")
}

model devices {
  id         Int       @id @default(autoincrement())
  sn         String    @db.VarChar(12)
  comment    String?   @db.VarChar(255)
  last_check DateTime? @db.DateTime(0)
  last_tx    BigInt?   @default(0)
  last_rx    BigInt?   @default(0)
  traffic    traffic[]
}

model raw_bandwidth_logs {
  log_id         BigInt   @id @default(autoincrement())
  user_id        Int
  source_ip      String?  @db.VarChar(45)
  destination_ip String?  @db.VarChar(45)
  tx_bytes       BigInt   @db.UnsignedBigInt
  rx_bytes       BigInt   @db.UnsignedBigInt
  timestamp      DateTime @db.DateTime(0)
  users          users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "raw_bandwidth_logs_ibfk_1")

  @@index([timestamp], map: "timestamp")
  @@index([user_id], map: "user_id")
}

model traffic {
  id        Int       @id @default(autoincrement())
  device_id Int
  timestamp DateTime? @db.DateTime(0)
  tx        BigInt?   @default(0)
  rx        BigInt?   @default(0)
  devices   devices   @relation(fields: [device_id], references: [id], onUpdate: Restrict, map: "traffic_ibfk_1")

  @@index([device_id], map: "device_id")
}

model users {
  user_id                         Int                               @id @default(autoincrement())
  username                        String                            @unique(map: "username") @db.VarChar(255)
  aggregated_bandwidth_logs_30min aggregated_bandwidth_logs_30min[]
  aggregated_bandwidth_logs_3hr   aggregated_bandwidth_logs_3hr[]
  raw_bandwidth_logs              raw_bandwidth_logs[]
}
